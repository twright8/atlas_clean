{"id":"modules/ui.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"./constants","loc":{"line":1,"column":26,"index":26},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\ui.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInfoBox = createInfoBox;\nexports.debounce = debounce;\nexports.default = void 0;\nexports.initializeDatePickers = initializeDatePickers;\nexports.initializeExportButton = initializeExportButton;\nexports.initializeFilterBox = initializeFilterBox;\nexports.initializeFilterCheckboxes = initializeFilterCheckboxes;\nexports.initializeHelpButton = initializeHelpButton;\nexports.initializeInfoIcons = initializeInfoIcons;\nexports.initializeResetButton = initializeResetButton;\nexports.initializeSearchInput = initializeSearchInput;\nexports.initializeSelect2Filter = initializeSelect2Filter;\nexports.initializeShareButtons = initializeShareButtons;\nexports.initializeViewToggle = initializeViewToggle;\nexports.initializeWelcomeOverlay = initializeWelcomeOverlay;\nexports.updateResetButtonVisibility = updateResetButtonVisibility;\nvar _constants = require(\"./constants\");\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nvar currentInfoBox = null;\n\n/**\r\n * Initialize view toggling between map, dashboard, and table\r\n */\nfunction initializeViewToggle() {\n  var buttons = document.querySelectorAll('.switch-button');\n  var mapOverviewBtn = document.getElementById('map-overview-btn');\n  var dashboardBtn = document.getElementById('dashboard-btn');\n  var listBtn = document.getElementById('cases-btn');\n  var mapElement = document.getElementById('map');\n  var dashboardElement = document.getElementById('dashboard');\n  var dataTables = document.getElementById('mask');\n  function updateVisibility() {\n    if (mapOverviewBtn.classList.contains('active')) {\n      mapElement.style.display = 'block';\n      dashboardElement.style.display = 'none';\n      dataTables.style.display = 'none';\n    } else if (listBtn.classList.contains('active')) {\n      mapElement.style.display = 'none';\n      dashboardElement.style.display = 'none';\n      dataTables.style.display = 'block';\n    } else if (dashboardBtn.classList.contains('active')) {\n      mapElement.style.display = 'none';\n      dashboardElement.style.display = 'block';\n      dataTables.style.display = 'none';\n    }\n  }\n  buttons.forEach(function (button) {\n    button.addEventListener('click', function () {\n      buttons.forEach(function (btn) {\n        return btn.classList.remove('active');\n      });\n      button.classList.add('active');\n      updateVisibility();\n\n      // Force dashboard refresh when dashboard tab is selected\n      if (button.id === 'dashboard-btn' && typeof window.handleDashboardResize === 'function') {\n        setTimeout(window.handleDashboardResize, 300);\n      }\n    });\n  });\n\n  // Initial visibility setup\n  updateVisibility();\n}\n\n/**\r\n * Initialize the filter box expand/collapse functionality\r\n */\nfunction initializeFilterBox() {\n  document.querySelector('#clicker').addEventListener('click', function () {\n    var content = document.querySelector('.filter-content');\n    var icon = document.querySelector('.expand-icon');\n    content.classList.toggle('expanded');\n    icon.classList.toggle('expanded');\n  });\n}\n\n/**\r\n * Initialize filter functionality for Select2 dropdowns\r\n * @param {String} selector CSS selector for the dropdown\r\n * @param {Array} data Array of options\r\n * @param {String} placeholder Placeholder text\r\n * @param {Function} onChange Function to call when selection changes\r\n */\nfunction initializeSelect2Filter(selector, data, placeholder, onChange) {\n  $(selector).select2({\n    data: data.map(function (item) {\n      return {\n        id: item,\n        text: item\n      };\n    }),\n    placeholder: placeholder\n  }).on('change', onChange);\n}\n\n/**\r\n * Initialize date picker widgets\r\n * @param {Function} onChange Function to call when date changes\r\n * @param {Object} dateRange Object with minDate and maxDate\r\n */\nfunction initializeDatePickers(onChange, dateRange) {\n  $('#startDate, #endDate').datepicker({\n    format: 'dd/mm/yy',\n    autoclose: true\n  }).on('changeDate', onChange);\n\n  // Set initial dates\n  $('#startDate').datepicker('setDate', dateRange.minDate);\n  $('#endDate').datepicker('setDate', dateRange.maxDate);\n}\n\n/**\r\n * Initialize search input with debounce\r\n * @param {Function} onChange Function to call when search input changes\r\n * @param {Number} debounceTime Debounce time in milliseconds\r\n */\nfunction initializeSearchInput(onChange) {\n  var debounceTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n  $('#search-input').on('input', debounce(onChange, debounceTime));\n}\n\n/**\r\n * Initialize filter checkboxes\r\n * @param {Object} checkboxes Object with checkbox IDs and change handlers\r\n */\nfunction initializeFilterCheckboxes(checkboxes) {\n  Object.entries(checkboxes).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      id = _ref2[0],\n      handler = _ref2[1];\n    var checkbox = document.getElementById(id);\n    if (checkbox) {\n      checkbox.addEventListener('change', handler);\n    }\n  });\n}\n\n/**\r\n * Initialize reset filters button\r\n * @param {Function} resetFunction Function to reset all filters\r\n */\nfunction initializeResetButton(resetFunction) {\n  $('#resetFilters').on('click', resetFunction);\n}\n\n/**\r\n * Update reset button visibility based on filter state\r\n * @param {Boolean} isActive Whether any filter is active\r\n */\nfunction updateResetButtonVisibility(isActive) {\n  if (isActive) {\n    $('#resetFilters').show();\n  } else {\n    $('#resetFilters').hide();\n  }\n}\n\n/**\r\n * Create an info box tooltip\r\n * @param {String} content Content for the tooltip\r\n * @param {HTMLElement} target Target element to position tooltip near\r\n */\nfunction createInfoBox(content, target) {\n  console.log('Creating info box for:', content);\n  if (currentInfoBox) {\n    currentInfoBox.remove();\n  }\n  var infoBox = document.createElement('div');\n  infoBox.className = 'info-box';\n  infoBox.textContent = content;\n  document.body.appendChild(infoBox);\n  var targetRect = target.getBoundingClientRect();\n  infoBox.style.top = \"\".concat(targetRect.bottom + window.scrollY + 5, \"px\");\n  infoBox.style.left = \"\".concat(targetRect.left + window.scrollX - 150, \"px\");\n  infoBox.style.display = 'block';\n  currentInfoBox = infoBox;\n  console.log('Info box created and displayed');\n}\n\n/**\r\n * Initialize info icons for tooltips\r\n */\nfunction initializeInfoIcons() {\n  function handleInfoIconClick(e) {\n    console.log('Info icon clicked:', this.id);\n    e.preventDefault();\n    e.stopPropagation();\n    var filterType = this.getAttribute('data-filter');\n    var infoContent = _constants.infoBoxes[filterType];\n    createInfoBox(infoContent, this);\n  }\n  var infoIconIds = ['main-info', 'country-info', 'corruption-info', 'health-info', 'date-info', 'archived-info', 'case-info', 'unreliable-info', 'country-level-info'];\n  infoIconIds.forEach(function (id) {\n    var icon = document.getElementById(id);\n    if (icon) {\n      console.log('Attaching click event to:', id);\n      icon.addEventListener('click', handleInfoIconClick);\n      icon.addEventListener('mousedown', function (e) {\n        return e.preventDefault();\n      });\n    } else {\n      console.warn('Info icon not found:', id);\n    }\n  });\n\n  // Close info box when clicking elsewhere\n  document.addEventListener('click', function (e) {\n    if (currentInfoBox && !e.target.classList.contains('info-icon')) {\n      console.log('Closing info box');\n      currentInfoBox.remove();\n      currentInfoBox = null;\n    }\n  });\n}\n\n/**\r\n * Initialize welcome dialog/overlay\r\n */\nfunction initializeWelcomeOverlay() {\n  var overlay = document.getElementById('infoCardOverlay');\n  if (!sessionStorage.getItem('hasVisitedBefore')) {\n    setTimeout(function () {\n      overlay.classList.add('show');\n    }, 100);\n  }\n  document.getElementById('closeInfoCard').addEventListener('click', function () {\n    overlay.classList.remove('show');\n    sessionStorage.setItem('hasVisitedBefore', 'true');\n  });\n\n  // Close when clicking overlay background\n  $('#infoCardOverlay').on('click', function (e) {\n    if (e.target === this) {\n      $(this).removeClass('show');\n    }\n  });\n}\n\n/**\r\n * Initialize help button to open overlay\r\n */\nfunction initializeHelpButton() {\n  var helpButton = $('<button>').addClass('btn btn-sm btn-outline-secondary export-csv-button btn-sharer').html('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 512 512\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM169.8 165.3c7.9-22.3 29.1-37.3 52.8-37.3l58.3 0c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24l0-13.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1l-58.3 0c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>').attr('title', 'Open the Quick start menu').appendTo('#help-button-container').css({\n    'min-height': '34px',\n    'display': 'flex',\n    'align-items': 'center',\n    'justify-content': 'center'\n  }).on('click', function () {\n    $('#infoCardOverlay').addClass('show');\n  });\n}\n\n/**\r\n * Initialize share buttons\r\n */\nfunction initializeShareButtons() {\n  function shareOnTwitter() {\n    var thisPage = window.location.href.split('?')[0];\n    var shareText = 'Explore global health sector integrity issues and scandals: ' + thisPage;\n    var shareURL = 'https://twitter.com/intent/tweet?text=' + encodeURIComponent(shareText);\n    window.open(shareURL, '_blank');\n  }\n  function shareOnLinkedIn() {\n    var thisPage = window.location.href.split('?')[0];\n    var toShareUrl = 'https://ti-health.org/';\n    var shareURL = 'https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(toShareUrl);\n    window.open(shareURL, '_blank', 'toolbar=no,location=0,status=no,menubar=no,scrollbars=yes,resizable=yes,width=600,height=250,top=300,left=300');\n    return;\n  }\n  var twitterButton = document.getElementById('twitter_share');\n  if (twitterButton) {\n    twitterButton.addEventListener('click', shareOnTwitter);\n  }\n  var linkedInButton = document.getElementById('lin_share');\n  if (linkedInButton) {\n    linkedInButton.addEventListener('click', shareOnLinkedIn);\n  }\n}\n\n/**\r\n * Initialize export data button\r\n * @param {Function} getDataFunction Function to get current filtered data\r\n */\nfunction initializeExportButton(getDataFunction) {\n  var exportButton = $('<button>').addClass('btn btn-sm btn-outline-secondary export-csv-button btn-sharer').html('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-box-arrow-down\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M3.5 10a.5.5 0 0 1-.5-.5v-8a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 0 0 1h2A1.5 1.5 0 0 0 14 9.5v-8A1.5 1.5 0 0 0 12.5 0h-9A1.5 1.5 0 0 0 2 1.5v8A1.5 1.5 0 0 0 3.5 11h2a.5.5 0 0 0 0-1z\"/><path fill-rule=\"evenodd\" d=\"M7.646 15.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 14.293V5.5a.5.5 0 0 0-1 0v8.793l-2.146-2.147a.5.5 0 0 0-.708.708z\"/></svg>').attr('title', 'Export filtered data to CSV').appendTo('#export-button-container').on('click', function () {\n    var dataToExport = getDataFunction();\n    var csv = [];\n    var headers = ['Title', 'Country/Region', 'URL', 'Date'];\n    csv.push(headers.join(','));\n    dataToExport.forEach(function (row) {\n      var csvRow = ['\"' + (row.Title || '').replace(/\"/g, '\"\"') + '\"', '\"' + (row.country || '').replace(/\"/g, '\"\"') + '\"', '\"' + (row.url || '').replace(/\"/g, '\"\"') + '\"', '\"' + (row['Date'] || '').replace(/\"/g, '\"\"') + '\"'];\n      csv.push(csvRow.join(','));\n    });\n    var csvContent = csv.join('\\n');\n    var blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    var link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      var url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", \"export.csv\");\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  });\n}\n\n/**\r\n * Utility function to debounce function calls\r\n * @param {Function} func Function to debounce\r\n * @param {Number} wait Wait time in milliseconds\r\n * @returns {Function} Debounced function\r\n */\nfunction debounce(func, wait) {\n  var timeout;\n  return function executedFunction() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var later = function later() {\n      clearTimeout(timeout);\n      func.apply(void 0, args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\nvar _default = exports.default = {\n  initializeViewToggle: initializeViewToggle,\n  initializeFilterBox: initializeFilterBox,\n  initializeSelect2Filter: initializeSelect2Filter,\n  initializeDatePickers: initializeDatePickers,\n  initializeSearchInput: initializeSearchInput,\n  initializeFilterCheckboxes: initializeFilterCheckboxes,\n  initializeResetButton: initializeResetButton,\n  updateResetButtonVisibility: updateResetButtonVisibility,\n  createInfoBox: createInfoBox,\n  initializeInfoIcons: initializeInfoIcons,\n  initializeWelcomeOverlay: initializeWelcomeOverlay,\n  initializeHelpButton: initializeHelpButton,\n  initializeShareButtons: initializeShareButtons,\n  initializeExportButton: initializeExportButton,\n  debounce: debounce\n};"},"sourceMaps":null,"error":null,"hash":"0f83187b40878c68429f069b8545c80b","cacheData":{"env":{}}}