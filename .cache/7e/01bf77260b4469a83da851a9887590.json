{"id":"js/components/markers.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741188834651},{"name":"../utils/formatters.js","loc":{"line":5,"column":25,"index":101},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\js\\components\\markers.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\js\\utils\\formatters.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupMapMoveEvents = setupMapMoveEvents;\nexports.updateMapMarkers = updateMapMarkers;\nvar _formatters = require(\"../utils/formatters.js\");\n/**\n * Markers module\n * Handles creation and management of map markers\n */\n\n/**\n * Update map markers based on filtered data\n * @param {Object} mapConfig - Map configuration object \n * @param {Array} filteredData - Filtered data to display on map\n * @param {Object} state - Application state\n * @param {Function} updateVisibleDataCallback - Callback for updating visible data\n */\nfunction updateMapMarkers(mapConfig, filteredData, state, updateVisibleDataCallback) {\n  console.time('Updating Map and Table');\n  var markers = mapConfig.markers,\n    icons = mapConfig.icons;\n\n  // Clear existing markers\n  markers.clearLayers();\n  state.markerMap.clear();\n  if (filteredData.length > 0) {\n    var chunk = 1000;\n    var index = 0;\n    function addNextChunk() {\n      var limit = Math.min(index + chunk, filteredData.length);\n      var newMarkers = [];\n      for (var i = index; i < limit; i++) {\n        var location = filteredData[i];\n        var uniqueId = \"\".concat(location.lat, \"-\").concat(location.long, \"-\").concat(location.Title);\n        if (!state.markerMap.has(uniqueId)) {\n          // Use country or specific icon based on country_level\n          var icon = location.country_level ? icons.countryIcon : icons.specificIcon;\n          var marker = L.marker([location.lat, location.long], {\n            icon: icon\n          }).bindPopup(createPopupContent(location));\n          newMarkers.push(marker);\n          state.markerMap.set(uniqueId, marker);\n        }\n      }\n      markers.addLayers(newMarkers);\n      index = limit;\n      if (index < filteredData.length) {\n        setTimeout(addNextChunk, 0);\n      } else {\n        mapConfig.map.fitBounds(markers.getBounds());\n        updateVisibleDataCallback();\n      }\n    }\n    addNextChunk();\n  } else {\n    updateVisibleDataCallback();\n  }\n  console.timeEnd('Updating Map and Table');\n}\n\n/**\n * Create popup content for a marker\n * @param {Object} location - Location data\n * @returns {string} HTML content for popup\n */\nfunction createPopupContent(location) {\n  return \"\\n        <div class=\\\"popup-content\\\">\\n            <h3 class=\\\"popup-title\\\">\\\"\".concat(location.Title, \"\\\"</h3>\\n            <div class=\\\"popup-details\\\">\\n                <p><strong>Country:</strong> \").concat(location.country, \"</p>\\n                <p><strong>URL:</strong> <a href=\\\"\").concat(location.url, \"\\\" target=\\\"_blank\\\">Link</a></p>\\n                <p><strong>Date:</strong> \").concat(location['Date'], \"</p>\\n                <p><strong>Integrity Area:</strong> \").concat(String(location['Corruption Categories'] || '').replace(/,(?=[^\\s])/g, ', '), \"</p>\\n                <p><strong>Sector Area:</strong> \").concat(String(location['Sector Categories'] || '').replace(/,(?=[^\\s])/g, ', '), \"</p>\\n            </div>\\n        </div>\\n    \");\n}\n\n/**\n * Set up map move events to update visible data\n * @param {Object} mapConfig - Map configuration \n * @param {Array} filteredData - Filtered data\n * @param {Object} dataTable - DataTable instance\n */\nfunction setupMapMoveEvents(mapConfig, filteredData, dataTable) {\n  var updateVisibleData = (0, _formatters.debounce)(function () {\n    console.time('Updating Visible Data');\n    if (mapConfig.map.isMoving()) {\n      return;\n    }\n    var bounds = mapConfig.map.getBounds();\n    var visibleData = filteredData.filter(function (d) {\n      return bounds.contains(L.latLng(d.lat, d.long));\n    });\n    dataTable.clear().rows.add(visibleData).draw();\n    $('.filter-count').text(formatNumber(visibleData.length));\n    console.timeEnd('Updating Visible Data');\n  }, 1000);\n  mapConfig.map.on('movestart', function () {\n    mapConfig.map.isMoving = function () {\n      return true;\n    };\n  });\n  mapConfig.map.on('moveend', function () {\n    mapConfig.map.isMoving = function () {\n      return false;\n    };\n    updateVisibleData();\n  });\n  return updateVisibleData;\n}\n\n/**\n * Format number with locale-specific formatting\n * @param {number} num - Number to format\n * @returns {string} Formatted number\n */\nfunction formatNumber(num) {\n  var numberFormatter = new Intl.NumberFormat(undefined, {\n    maximumFractionDigits: 0\n  });\n  return numberFormatter.format(num);\n}"},"sourceMaps":null,"error":null,"hash":"5bd2722b11d648df37b8b8744b06528f","cacheData":{"env":{}}}