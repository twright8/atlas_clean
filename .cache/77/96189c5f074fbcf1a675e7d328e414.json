{"id":"../node_modules/d3-geo/src/projection/conicEquidistant.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\package.json","includedInParent":true,"mtime":1737120275660},{"name":"../math.js","loc":{"line":1,"column":56,"index":56},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conicEquidistant.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\math.js"},{"name":"./conic.js","loc":{"line":2,"column":30,"index":101},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conicEquidistant.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conic.js"},{"name":"./equirectangular.js","loc":{"line":3,"column":33,"index":149},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conicEquidistant.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\equirectangular.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.conicEquidistantRaw = conicEquidistantRaw;\nexports.default = _default;\nvar _math = require(\"../math.js\");\nvar _conic = require(\"./conic.js\");\nvar _equirectangular = require(\"./equirectangular.js\");\nfunction conicEquidistantRaw(y0, y1) {\n  var cy0 = (0, _math.cos)(y0),\n    n = y0 === y1 ? (0, _math.sin)(y0) : (cy0 - (0, _math.cos)(y1)) / (y1 - y0),\n    g = cy0 / n + y0;\n  if ((0, _math.abs)(n) < _math.epsilon) return _equirectangular.equirectangularRaw;\n  function project(x, y) {\n    var gy = g - y,\n      nx = n * x;\n    return [gy * (0, _math.sin)(nx), g - gy * (0, _math.cos)(nx)];\n  }\n  project.invert = function (x, y) {\n    var gy = g - y;\n    return [(0, _math.atan2)(x, (0, _math.abs)(gy)) / n * (0, _math.sign)(gy), g - (0, _math.sign)(n) * (0, _math.sqrt)(x * x + gy * gy)];\n  };\n  return project;\n}\nfunction _default() {\n  return (0, _conic.conicProjection)(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);\n}"},"sourceMaps":null,"error":null,"hash":"6a0dc8de449cfa6f79e45239d2025fe7","cacheData":{"env":{}}}