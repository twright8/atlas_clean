{"id":"../node_modules/d3-scale/src/log.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\package.json","includedInParent":true,"mtime":1737120275874},{"name":"d3-array","loc":{"line":1,"column":20,"index":20},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\log.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-array\\src\\index.js"},{"name":"d3-format","loc":{"line":2,"column":21,"index":54},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\log.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\index.js"},{"name":"./nice","loc":{"line":3,"column":17,"index":85},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\log.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\nice.js"},{"name":"./continuous","loc":{"line":4,"column":32,"index":128},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\log.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\continuous.js"},{"name":"./init","loc":{"line":5,"column":24,"index":169},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\log.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\init.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = log;\nexports.loggish = loggish;\nvar _d3Array = require(\"d3-array\");\nvar _d3Format = require(\"d3-format\");\nvar _nice = _interopRequireDefault(require(\"./nice\"));\nvar _continuous = require(\"./continuous\");\nvar _init = require(\"./init\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction transformLog(x) {\n  return Math.log(x);\n}\nfunction transformExp(x) {\n  return Math.exp(x);\n}\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\nfunction powp(base) {\n  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {\n    return Math.pow(base, x);\n  };\n}\nfunction logp(base) {\n  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {\n    return Math.log(x) / base;\n  });\n}\nfunction reflect(f) {\n  return function (x) {\n    return -f(-x);\n  };\n}\nfunction loggish(transform) {\n  var scale = transform(transformLog, transformExp),\n    domain = scale.domain,\n    base = 10,\n    logs,\n    pows;\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n    return scale;\n  }\n  scale.base = function (_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n  scale.domain = function (_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n  scale.ticks = function (count) {\n    var d = domain(),\n      u = d[0],\n      v = d[d.length - 1],\n      r;\n    if (r = v < u) i = u, u = v, v = i;\n    var i = logs(u),\n      j = logs(v),\n      p,\n      k,\n      t,\n      n = count == null ? 10 : +count,\n      z = [];\n    if (!(base % 1) && j - i < n) {\n      i = Math.round(i) - 1, j = Math.round(j) + 1;\n      if (u > 0) for (; i < j; ++i) {\n        for (k = 1, p = pows(i); k < base; ++k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i < j; ++i) {\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n    } else {\n      z = (0, _d3Array.ticks)(i, j, Math.min(j - i, n)).map(pows);\n    }\n    return r ? z.reverse() : z;\n  };\n  scale.tickFormat = function (count, specifier) {\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n    if (typeof specifier !== \"function\") specifier = (0, _d3Format.format)(specifier);\n    if (count === Infinity) return specifier;\n    if (count == null) count = 10;\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return function (d) {\n      var i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n  scale.nice = function () {\n    return domain((0, _nice.default)(domain(), {\n      floor: function (x) {\n        return pows(Math.floor(logs(x)));\n      },\n      ceil: function (x) {\n        return pows(Math.ceil(logs(x)));\n      }\n    }));\n  };\n  return scale;\n}\nfunction log() {\n  var scale = loggish((0, _continuous.transformer)()).domain([1, 10]);\n  scale.copy = function () {\n    return (0, _continuous.copy)(scale, log()).base(scale.base());\n  };\n  _init.initRange.apply(scale, arguments);\n  return scale;\n}"},"sourceMaps":null,"error":null,"hash":"f2e12b888b2b7a2c85a961fc0b8a7ed3","cacheData":{"env":{}}}