{"id":"map.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1737120279329}],"generated":{"js":"function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.time('Total Initialization');\n  console.log(\"Initialization started\");\n  var overlay = document.getElementById('infoCardOverlay');\n  if (!sessionStorage.getItem('hasVisitedBefore')) {\n    setTimeout(function () {\n      overlay.classList.add('show');\n    }, 100);\n  }\n  document.getElementById('closeInfoCard').addEventListener('click', function () {\n    overlay.classList.remove('show');\n    sessionStorage.setItem('hasVisitedBefore', 'true');\n  });\n  console.time('Map Initialization');\n  var map = L.map('map').setView([0, 0], 2); // Start with a global view\n\n  var openStreetMapLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    maxZoom: 10\n  });\n  var stamenTerrainLayer = L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.png', {\n    attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    subdomains: 'abcd',\n    minZoom: 0,\n    maxZoom: 10\n  });\n  var buttons = document.querySelectorAll('.switch-button');\n  var mapOverviewBtn = document.getElementById('map-overview-btn');\n  var listBtn = document.getElementById('list-btn');\n  var mapElement = document.getElementById('map');\n  var dataTables = document.getElementById('mask');\n  function updateVisibility() {\n    if (mapOverviewBtn.classList.contains('active')) {\n      mapElement.style.display = 'block';\n      dataTables.style.display = 'none';\n    } else {\n      mapElement.style.display = 'none';\n      dataTables.style.display = 'block';\n    }\n  }\n  buttons.forEach(function (button) {\n    button.addEventListener('click', function () {\n      buttons.forEach(function (btn) {\n        return btn.classList.remove('active');\n      });\n      button.classList.add('active');\n      updateVisibility();\n    });\n  });\n\n  // Initial visibility setup\n  updateVisibility();\n  var currentLayer = openStreetMapLayer.addTo(map);\n  function switchTileLayer() {\n    map.removeLayer(currentLayer);\n    if (currentLayer === openStreetMapLayer) {\n      currentLayer = stamenTerrainLayer.addTo(map);\n      console.log('Switched to Stamen Terrain tiles');\n    } else {\n      currentLayer = openStreetMapLayer.addTo(map);\n      console.log('Switched to OpenStreetMap tiles');\n    }\n  }\n  var consecutiveErrors = 0;\n  var maxConsecutiveErrors = 5;\n  currentLayer.on('tileerror', function (error) {\n    console.log('Tile loading error:', error);\n    consecutiveErrors++;\n    if (consecutiveErrors >= maxConsecutiveErrors) {\n      console.log(\"\".concat(maxConsecutiveErrors, \" consecutive errors. Switching tile layer.\"));\n      switchTileLayer();\n      consecutiveErrors = 0;\n    }\n  });\n  currentLayer.on('tileload', function () {\n    consecutiveErrors = 0;\n  });\n  var markers = L.markerClusterGroup({\n    chunkedLoading: true,\n    chunkInterval: 200,\n    chunkDelay: 50\n  });\n  map.addLayer(markers);\n  console.timeEnd('Map Initialization');\n  console.time('DataTable Initialization');\n  var dataTable = $('#dc-data-table').DataTable({\n    searching: false,\n    lengthChange: false,\n    columns: [{\n      data: 'Title',\n      width: '50%',\n      defaultContent: \"N/A\",\n      render: function render(data, type, row) {\n        return data ? \"\\\"\".concat(data, \"\\\"\") : 'N/A';\n      }\n    }, {\n      data: 'country'\n    }, {\n      data: 'url',\n      render: function render(data, type, row) {\n        return data ? \"<a href=\\\"\".concat(data, \"\\\" target=\\\"_blank\\\">Link</a>\") : '';\n      }\n    }, {\n      data: 'Date'\n    }, {\n      data: 'Corruption Categories',\n      render: function render(data, type, row) {\n        if (!data) return '';\n        var strData = String(data);\n        return strData.replace(/,(?=[^\\s])/g, ', ');\n      }\n    }],\n    columnDefs: [{\n      type: 'date-eu',\n      targets: 3\n    }],\n    order: [[3, 'desc']]\n  });\n  console.timeEnd('DataTable Initialization');\n  jQuery.extend(jQuery.fn.dataTableExt.oSort, {\n    \"date-eu-pre\": function dateEuPre(date) {\n      if (date.indexOf(\"Cancelled\") > -1) {\n        date = date.split(\" \")[0];\n      }\n      return dmy(date);\n    },\n    \"date-eu-asc\": function dateEuAsc(a, b) {\n      return a < b ? -1 : a > b ? 1 : 0;\n    },\n    \"date-eu-desc\": function dateEuDesc(a, b) {\n      return a < b ? 1 : a > b ? -1 : 0;\n    }\n  });\n  var numberFormatter = new Intl.NumberFormat(undefined, {\n    maximumFractionDigits: 0\n  });\n  function formatNumber(num) {\n    return numberFormatter.format(num);\n  }\n  var allData = [];\n  var filteredData = [];\n  var markerMap = new Map();\n  var minDate, maxDate;\n  function debounce(func, wait) {\n    var timeout;\n    return function executedFunction() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      var later = function later() {\n        clearTimeout(timeout);\n        func.apply(void 0, args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n  console.time('Data Fetching');\n  fetch('./data/loc3.json').then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.timeEnd('Data Fetching');\n    initMap(data);\n  }).catch(function (error) {\n    return console.error('Error loading data:', error);\n  });\n  var archivedFilter = document.getElementById('archivedFilter');\n  var caseFilter = document.getElementById('caseFilter');\n  var unreliableFilter = document.getElementById('unreliableFilter');\n  var countryLevelFilter = document.getElementById('countryLevelFilter');\n  function initMap(data) {\n    console.time('Data Processing');\n    var dateParser = d3.timeParse(\"%d/%m/%y\");\n    allData = data.map(function (d) {\n      return _objectSpread(_objectSpread({}, d), {}, {\n        parsedDate: dateParser(d['Date'])\n      });\n    });\n    $('.total-count').text(formatNumber(allData.length));\n    var uniqueCountries = _toConsumableArray(new Set(allData.map(function (item) {\n      return item.country;\n    }))).sort(function (a, b) {\n      return a.localeCompare(b);\n    });\n    var uniqueCorruptionCategories = _toConsumableArray(new Set(allData.flatMap(function (item) {\n      return item['Corruption Categories'];\n    }))).sort(function (a, b) {\n      return a.localeCompare(b);\n    });\n    var uniqueHealthCategories = _toConsumableArray(new Set(allData.flatMap(function (item) {\n      return item['Sector Categories'];\n    }))).sort(function (a, b) {\n      return a.localeCompare(b);\n    });\n    initializeSelect2Filter('#countryFilter', uniqueCountries, 'Select multiple');\n    initializeSelect2Filter('#corruptionCategoriesFilter', uniqueCorruptionCategories, 'Select multiple');\n    initializeSelect2Filter('#healthCategoriesFilter', uniqueHealthCategories, 'Select multiple');\n    minDate = d3.min(allData, function (d) {\n      return d.parsedDate;\n    });\n    maxDate = d3.max(allData, function (d) {\n      return d.parsedDate;\n    });\n    $('#startDate, #endDate').datepicker({\n      format: 'dd/mm/yy',\n      autoclose: true\n    }).on('changeDate', function () {\n      updateFilters();\n      updateResetButtonVisibility();\n    });\n    $('#startDate').datepicker('setDate', minDate);\n    $('#endDate').datepicker('setDate', maxDate);\n    $('#resetFilters').on('click', function () {\n      if (isAnyFilterActive()) {\n        $('#corruptionCategoriesFilter, #healthCategoriesFilter').val(null).trigger('change');\n        $('#countryFilter').val(null).trigger('change.select2');\n        $('#startDate').datepicker('setDate', minDate);\n        $('#endDate').datepicker('setDate', maxDate);\n        archivedFilter.checked = true;\n        caseFilter.checked = false;\n        unreliableFilter.checked = false;\n        countryLevelFilter.checked = true;\n        updateFilters();\n        updateResetButtonVisibility();\n      }\n    });\n    $('#search-input').on('input', debounce(function () {\n      updateFilters();\n      updateResetButtonVisibility();\n    }, 500));\n    console.timeEnd('Data Processing');\n    updateFilters();\n    updateResetButtonVisibility();\n  }\n  function initializeSelect2Filter(selector, data, placeholder) {\n    $(selector).select2({\n      data: data.map(function (item) {\n        return {\n          id: item,\n          text: item\n        };\n      }),\n      placeholder: placeholder\n    }).on('change', function () {\n      updateFilters();\n      updateResetButtonVisibility();\n    });\n  }\n  function isAnyFilterActive() {\n    var selectedCountries = $('#countryFilter').val() || [];\n    var selectedCorruptionCategories = $('#corruptionCategoriesFilter').val() || [];\n    var selectedHealthCategories = $('#healthCategoriesFilter').val() || [];\n    var startDate = $('#startDate').datepicker('getDate');\n    var endDate = $('#endDate').datepicker('getDate');\n    var searchTerm = $('#search-input').val().trim();\n    var isArchivedFilterActive = !archivedFilter.checked;\n    var isUnreliableFilterActive = unreliableFilter.checked;\n    var isCaseFilterActive = caseFilter.checked;\n    var isCountryLevelFilterActive = !countryLevelFilter.checked;\n    var isDateFilterActive = startDate && minDate && startDate.getTime() !== minDate.getTime() || endDate && maxDate && endDate.getTime() !== maxDate.getTime();\n    return selectedCountries.length > 0 || selectedCorruptionCategories.length > 0 || selectedHealthCategories.length > 0 || isDateFilterActive || searchTerm !== '' || isArchivedFilterActive || isUnreliableFilterActive || isCaseFilterActive || isCountryLevelFilterActive;\n  }\n  function updateResetButtonVisibility() {\n    if (isAnyFilterActive()) {\n      $('#resetFilters').show();\n    } else {\n      $('#resetFilters').hide();\n    }\n  }\n  var dmy = d3.timeParse(\"%d/%m/%y\");\n  function updateFilters() {\n    console.time('Filtering Data');\n    var selectedCountries = new Set($('#countryFilter').val() || []);\n    var selectedCorruptionCategories = new Set($('#corruptionCategoriesFilter').val() || []);\n    var selectedHealthCategories = new Set($('#healthCategoriesFilter').val() || []);\n    var startDate = $('#startDate').datepicker('getDate');\n    var endDate = $('#endDate').datepicker('getDate');\n    var searchTerm = $('#search-input').val().toLowerCase().trim();\n    var showArchived = archivedFilter.checked;\n    var showCase = caseFilter.checked;\n    var unreliableCase = unreliableFilter.checked;\n    var showCountryLevel = countryLevelFilter.checked;\n    filteredData = allData.filter(function (d) {\n      var countryMatch = selectedCountries.size === 0 || selectedCountries.has(d.country);\n      var corruptionCategoryMatch = selectedCorruptionCategories.size === 0 || d['Corruption Categories'].some(function (category) {\n        return selectedCorruptionCategories.has(category);\n      });\n      var healthCategoryMatch = selectedHealthCategories.size === 0 || d['Sector Categories'].some(function (category) {\n        return selectedHealthCategories.has(category);\n      });\n      var dateMatch = true;\n      if (startDate && endDate && d.parsedDate) {\n        dateMatch = d.parsedDate >= startDate && d.parsedDate <= endDate;\n      }\n      var titleMatch = true;\n      if (searchTerm) {\n        var title = d.Title.toLowerCase();\n        if (searchTerm.startsWith('\"') && searchTerm.endsWith('\"')) {\n          titleMatch = title.includes(searchTerm.slice(1, -1));\n        } else {\n          titleMatch = searchTerm.split(' ').every(function (word) {\n            return title.includes(word);\n          });\n        }\n      }\n      var archivedMatch = showArchived || !d.Archived;\n      var caseMatch = showCase || d.c_n;\n      var unreliableMatch = unreliableCase || !d.f_n;\n      var countryLevelMatch = showCountryLevel || !d.country_level;\n      return countryMatch && corruptionCategoryMatch && healthCategoryMatch && dateMatch && titleMatch && archivedMatch && unreliableMatch && caseMatch && countryLevelMatch;\n    });\n    console.timeEnd('Filtering Data');\n    updateMapAndTable();\n  }\n  function updateMapAndTable() {\n    console.time('Updating Map and Table');\n    markers.clearLayers();\n    markerMap.clear();\n    if (filteredData.length > 0) {\n      var chunk = 1000;\n      var index = 0;\n      function addNextChunk() {\n        var limit = Math.min(index + chunk, filteredData.length);\n        var newMarkers = [];\n        for (var i = index; i < limit; i++) {\n          var location = filteredData[i];\n          var uniqueId = \"\".concat(location.lat, \"-\").concat(location.long, \"-\").concat(location.Title);\n          if (!markerMap.has(uniqueId)) {\n            var marker = L.marker([location.lat, location.long]).bindPopup(\"\\n                                <div class=\\\"popup-content\\\">\\n                                    <h3 class=\\\"popup-title\\\">\\\"\".concat(location.Title, \"\\\"</h3>\\n                                    <div class=\\\"popup-details\\\">\\n                                        <p><strong>Country:</strong> \").concat(location.country, \"</p>\\n                                        <p><strong>URL:</strong> <a href=\\\"\").concat(location.url, \"\\\" target=\\\"_blank\\\">Link</a></p>\\n                                        <p><strong>Date:</strong> \").concat(location['Date'], \"</p>\\n                                        <p><strong>Corruption Type:</strong> \").concat(String(location['Corruption Categories'] || '').replace(/,(?=[^\\s])/g, ', '), \"</p>\\n                                        <p><strong>Sector Area:</strong> \").concat(String(location['Sector Categories'] || '').replace(/,(?=[^\\s])/g, ', '), \"</p>\\n                                    </div>\\n                                </div>\\n                            \"));\n            newMarkers.push(marker);\n            markerMap.set(uniqueId, marker);\n          }\n        }\n        markers.addLayers(newMarkers);\n        index = limit;\n        if (index < filteredData.length) {\n          setTimeout(addNextChunk, 0);\n        } else {\n          map.fitBounds(markers.getBounds());\n          updateVisibleData();\n        }\n      }\n      addNextChunk();\n    } else {\n      updateVisibleData();\n    }\n    console.timeEnd('Updating Map and Table');\n  }\n  document.querySelector('#clicker').addEventListener('click', function () {\n    var content = document.querySelector('.filter-content');\n    var icon = document.querySelector('.expand-icon');\n    content.classList.toggle('expanded');\n    icon.classList.toggle('expanded');\n  });\n  var updateVisibleData = debounce(function () {\n    console.time('Updating Visible Data');\n    if (map.isMoving()) {\n      return;\n    }\n    var bounds = map.getBounds();\n    var visibleData = filteredData.filter(function (d) {\n      return bounds.contains(L.latLng(d.lat, d.long));\n    });\n    dataTable.clear().rows.add(visibleData).draw();\n    $('.filter-count').text(formatNumber(visibleData.length));\n    console.timeEnd('Updating Visible Data');\n  }, 1000);\n  map.on('movestart', function () {\n    map.isMoving = function () {\n      return true;\n    };\n  });\n  map.on('moveend', function () {\n    map.isMoving = function () {\n      return false;\n    };\n    updateVisibleData();\n  });\n  var infoBoxes = {\n    country: \"Country mentioned in the article. This is usually, but not always, where the story occured.\",\n    corruption: \"We used AI to identify when a story is related to a particular type of corruption. See our 'About' page for qualifications and limitations.\",\n    health: \"We used AI to identify when a story is related to a particular area of health. See our 'About' page for qualifications and limitations.\",\n    date: \"Set a date range to view which events have happened within a specific time period. Our archived data uses publication date.\",\n    archived: \"When checked, this includes articles collected using our earlier data gathering methods. We've since improved our collection process. Unchecked shows only articles collected with our current methods.\",\n    cased: \"When unchecked, this filters out general discussions and commentaries to focus on stories about specific corruption cases. Check it to include all articles.\",\n    unreliable: \"We use AI to identify potentially unreliable news stories based on their writing style and content. While keeping this unchecked can help reduce exposure to low-quality news, please note: The filter works automatically and cannot fully understand context. It may incorrectly flag legitimate stories as unreliable. It may miss unreliable stories. It can reflect biases present in AI training data. Think of it as a helpful but unverified first pass rather than a definitive assessment of reliability.\",\n    countryLevel: \"When unchecked, this shows only articles where a specific location within the country could be determined. Check it to include articles where only the country-level location was identified. These two groups have different markers on the map.\"\n  };\n  var currentInfoBox = null;\n  archivedFilter.addEventListener('change', function () {\n    updateFilters();\n    updateResetButtonVisibility();\n  });\n  unreliableFilter.addEventListener('change', function () {\n    updateFilters();\n    updateResetButtonVisibility();\n  });\n  caseFilter.addEventListener('change', function () {\n    updateFilters();\n    updateResetButtonVisibility();\n  });\n  countryLevelFilter.addEventListener('change', function () {\n    updateFilters();\n    updateResetButtonVisibility();\n  });\n  function createInfoBox(content, target) {\n    console.log('Creating info box for:', content);\n    if (currentInfoBox) {\n      currentInfoBox.remove();\n    }\n    var infoBox = document.createElement('div');\n    infoBox.className = 'info-box';\n    infoBox.textContent = content;\n    document.body.appendChild(infoBox);\n    var targetRect = target.getBoundingClientRect();\n    infoBox.style.top = \"\".concat(targetRect.bottom + window.scrollY + 5, \"px\");\n    infoBox.style.left = \"\".concat(targetRect.left + window.scrollX - 150, \"px\");\n    infoBox.style.display = 'block';\n    currentInfoBox = infoBox;\n    console.log('Info box created and displayed');\n  }\n  function handleInfoIconClick(e) {\n    console.log('Info icon clicked:', this.id);\n    e.preventDefault();\n    e.stopPropagation();\n    var filterType = this.getAttribute('data-filter');\n    var infoContent = infoBoxes[filterType];\n    createInfoBox(infoContent, this);\n  }\n  var infoIconIds = ['main-info', 'country-info', 'corruption-info', 'health-info', 'date-info', 'archived-info', 'case-info', 'unreliable-info', 'country-level-info'];\n  infoIconIds.forEach(function (id) {\n    var icon = document.getElementById(id);\n    if (icon) {\n      console.log('Attaching click event to:', id);\n      icon.addEventListener('click', handleInfoIconClick);\n      icon.addEventListener('mousedown', function (e) {\n        return e.preventDefault();\n      });\n    } else {\n      console.warn('Info icon not found:', id);\n    }\n  });\n  document.addEventListener('click', function (e) {\n    if (currentInfoBox && !e.target.classList.contains('info-icon')) {\n      console.log('Closing info box');\n      currentInfoBox.remove();\n      currentInfoBox = null;\n    }\n  });\n  $('.filter-group select').off('select2:open');\n  var exportButton = $('<button>').addClass('btn btn-sm btn-outline-secondary export-csv-button btn-sharer').html('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-box-arrow-down\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M3.5 10a.5.5 0 0 1-.5-.5v-8a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 0 0 1h2A1.5 1.5 0 0 0 14 9.5v-8A1.5 1.5 0 0 0 12.5 0h-9A1.5 1.5 0 0 0 2 1.5v8A1.5 1.5 0 0 0 3.5 11h2a.5.5 0 0 0 0-1z\"/><path fill-rule=\"evenodd\" d=\"M7.646 15.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 14.293V5.5a.5.5 0 0 0-1 0v8.793l-2.146-2.147a.5.5 0 0 0-.708.708z\"/></svg>').attr('title', 'Export filtered data to CSV').appendTo('#export-button-container').on('click', function () {\n    var dataToExport = filteredData;\n    var csv = [];\n    var headers = ['Title', 'Country/Region', 'URL', 'Date'];\n    csv.push(headers.join(','));\n    dataToExport.forEach(function (row) {\n      var csvRow = ['\"' + (row.Title || '').replace(/\"/g, '\"\"') + '\"', '\"' + (row.country || '').replace(/\"/g, '\"\"') + '\"', '\"' + (row.url || '').replace(/\"/g, '\"\"') + '\"', '\"' + (row['Date'] || '').replace(/\"/g, '\"\"') + '\"'];\n      csv.push(csvRow.join(','));\n    });\n    var csvContent = csv.join('\\n');\n    var blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    var link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      var url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", \"export.csv\");\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  });\n  function shareOnTwitter() {\n    var thisPage = window.location.href.split('?')[0];\n    var shareText = 'Explore global health sector integrity issues and scandals: ' + thisPage;\n    var shareURL = 'https://twitter.com/intent/tweet?text=' + encodeURIComponent(shareText);\n    window.open(shareURL, '_blank');\n  }\n  function shareOnLinkedIn() {\n    var thisPage = window.location.href.split('?')[0];\n    var toShareUrl = 'https://ti-health.org/';\n    var shareURL = 'https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(toShareUrl);\n    window.open(shareURL, '_blank', 'toolbar=no,location=0,status=no,menubar=no,scrollbars=yes,resizable=yes,width=600,height=250,top=300,left=300');\n    return;\n  }\n  var twitterButton = document.getElementById('twitter_share');\n  if (twitterButton) {\n    twitterButton.addEventListener('click', shareOnTwitter);\n  }\n  var linkedInButton = document.getElementById('lin_share');\n  if (linkedInButton) {\n    linkedInButton.addEventListener('click', shareOnLinkedIn);\n  }\n  console.timeEnd('Total Initialization');\n});"},"sourceMaps":null,"error":null,"hash":"23e11af0e7f53a0cf9269e9df09b2643","cacheData":{"env":{}}}