{"id":"../node_modules/d3-scale/src/time.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\package.json","includedInParent":true,"mtime":1737120275874},{"name":"d3-array","loc":{"line":1,"column":33,"index":33},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\time.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-array\\src\\index.js"},{"name":"d3-time","loc":{"line":2,"column":104,"index":150},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\time.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-time\\src\\index.js"},{"name":"d3-time-format","loc":{"line":3,"column":25,"index":187},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\time.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-time-format\\src\\index.js"},{"name":"./array","loc":{"line":4,"column":18,"index":224},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\time.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\array.js"},{"name":"./continuous","loc":{"line":5,"column":41,"index":277},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\time.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\continuous.js"},{"name":"./init","loc":{"line":6,"column":24,"index":318},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\time.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\init.js"},{"name":"./nice","loc":{"line":7,"column":17,"index":346},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\time.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\nice.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calendar = calendar;\nexports.default = _default;\nvar _d3Array = require(\"d3-array\");\nvar _d3Time = require(\"d3-time\");\nvar _d3TimeFormat = require(\"d3-time-format\");\nvar _array = require(\"./array\");\nvar _continuous = _interopRequireWildcard(require(\"./continuous\"));\nvar _init = require(\"./init\");\nvar _nice = _interopRequireDefault(require(\"./nice\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar durationSecond = 1000,\n  durationMinute = durationSecond * 60,\n  durationHour = durationMinute * 60,\n  durationDay = durationHour * 24,\n  durationWeek = durationDay * 7,\n  durationMonth = durationDay * 30,\n  durationYear = durationDay * 365;\nfunction date(t) {\n  return new Date(t);\n}\nfunction number(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\nfunction calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n  var scale = (0, _continuous.default)(_continuous.identity, _continuous.identity),\n    invert = scale.invert,\n    domain = scale.domain;\n  var formatMillisecond = format(\".%L\"),\n    formatSecond = format(\":%S\"),\n    formatMinute = format(\"%I:%M\"),\n    formatHour = format(\"%I %p\"),\n    formatDay = format(\"%a %d\"),\n    formatWeek = format(\"%b %d\"),\n    formatMonth = format(\"%B\"),\n    formatYear = format(\"%Y\");\n  var tickIntervals = [[second, 1, durationSecond], [second, 5, 5 * durationSecond], [second, 15, 15 * durationSecond], [second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);\n  }\n  function tickInterval(interval, start, stop, step) {\n    if (interval == null) interval = 10;\n\n    // If a desired tick count is specified, pick a reasonable tick interval\n    // based on the extent of the domain and a rough estimate of tick size.\n    // Otherwise, assume interval is already a time interval and use it.\n    if (typeof interval === \"number\") {\n      var target = Math.abs(stop - start) / interval,\n        i = (0, _d3Array.bisector)(function (i) {\n          return i[2];\n        }).right(tickIntervals, target);\n      if (i === tickIntervals.length) {\n        step = (0, _d3Array.tickStep)(start / durationYear, stop / durationYear, interval);\n        interval = year;\n      } else if (i) {\n        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n        step = i[1];\n        interval = i[0];\n      } else {\n        step = Math.max((0, _d3Array.tickStep)(start, stop, interval), 1);\n        interval = millisecond;\n      }\n    }\n    return step == null ? interval : interval.every(step);\n  }\n  scale.invert = function (y) {\n    return new Date(invert(y));\n  };\n  scale.domain = function (_) {\n    return arguments.length ? domain(_array.map.call(_, number)) : domain().map(date);\n  };\n  scale.ticks = function (interval, step) {\n    var d = domain(),\n      t0 = d[0],\n      t1 = d[d.length - 1],\n      r = t1 < t0,\n      t;\n    if (r) t = t0, t0 = t1, t1 = t;\n    t = tickInterval(interval, t0, t1, step);\n    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n    return r ? t.reverse() : t;\n  };\n  scale.tickFormat = function (count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n  scale.nice = function (interval, step) {\n    var d = domain();\n    return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain((0, _nice.default)(d, interval)) : scale;\n  };\n  scale.copy = function () {\n    return (0, _continuous.copy)(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n  };\n  return scale;\n}\nfunction _default() {\n  return _init.initRange.apply(calendar(_d3Time.timeYear, _d3Time.timeMonth, _d3Time.timeWeek, _d3Time.timeDay, _d3Time.timeHour, _d3Time.timeMinute, _d3Time.timeSecond, _d3Time.timeMillisecond, _d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n}"},"sourceMaps":null,"error":null,"hash":"4a99732700a1e001691880ff82c14c51","cacheData":{"env":{}}}