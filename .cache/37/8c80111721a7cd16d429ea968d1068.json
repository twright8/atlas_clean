{"id":"../node_modules/d3-hierarchy/src/partition.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-hierarchy\\package.json","includedInParent":true,"mtime":1737120275705},{"name":"./treemap/round.js","loc":{"line":1,"column":22,"index":22},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-hierarchy\\src\\partition.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-hierarchy\\src\\treemap\\round.js"},{"name":"./treemap/dice.js","loc":{"line":2,"column":24,"index":69},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-hierarchy\\src\\partition.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-hierarchy\\src\\treemap\\dice.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _round = _interopRequireDefault(require(\"./treemap/round.js\"));\nvar _dice = _interopRequireDefault(require(\"./treemap/dice.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _default() {\n  var dx = 1,\n    dy = 1,\n    padding = 0,\n    round = false;\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 = root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(_round.default);\n    return root;\n  }\n  function positionNode(dy, n) {\n    return function (node) {\n      if (node.children) {\n        (0, _dice.default)(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n      var x0 = node.x0,\n        y0 = node.y0,\n        x1 = node.x1 - padding,\n        y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n  partition.round = function (x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n  partition.size = function (x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n  partition.padding = function (x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n  return partition;\n}"},"sourceMaps":null,"error":null,"hash":"d7c7a15835efffeb5ee61946988da7c1","cacheData":{"env":{}}}