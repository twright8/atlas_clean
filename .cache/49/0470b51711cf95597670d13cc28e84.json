{"id":"../node_modules/d3-geo/src/circle.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\package.json","includedInParent":true,"mtime":1737120275660},{"name":"./cartesian.js","loc":{"line":1,"column":62,"index":62},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\circle.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\cartesian.js"},{"name":"./constant.js","loc":{"line":2,"column":21,"index":102},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\circle.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\constant.js"},{"name":"./math.js","loc":{"line":3,"column":61,"index":181},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\circle.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\math.js"},{"name":"./rotation.js","loc":{"line":4,"column":28,"index":223},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\circle.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\rotation.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.circleStream = circleStream;\nexports.default = _default;\nvar _cartesian = require(\"./cartesian.js\");\nvar _constant = _interopRequireDefault(require(\"./constant.js\"));\nvar _math = require(\"./math.js\");\nvar _rotation = require(\"./rotation.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nfunction circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = (0, _math.cos)(radius),\n    sinRadius = (0, _math.sin)(radius),\n    step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * _math.tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * _math.tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = (0, _cartesian.spherical)([cosRadius, -sinRadius * (0, _math.cos)(t), -sinRadius * (0, _math.sin)(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = (0, _cartesian.cartesian)(point), point[0] -= cosRadius;\n  (0, _cartesian.cartesianNormalizeInPlace)(point);\n  var radius = (0, _math.acos)(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + _math.tau - _math.epsilon) % _math.tau;\n}\nfunction _default() {\n  var center = (0, _constant.default)([0, 0]),\n    radius = (0, _constant.default)(90),\n    precision = (0, _constant.default)(6),\n    ring,\n    rotate,\n    stream = {\n      point: point\n    };\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= _math.degrees, x[1] *= _math.degrees;\n  }\n  function circle() {\n    var c = center.apply(this, arguments),\n      r = radius.apply(this, arguments) * _math.radians,\n      p = precision.apply(this, arguments) * _math.radians;\n    ring = [];\n    rotate = (0, _rotation.rotateRadians)(-c[0] * _math.radians, -c[1] * _math.radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {\n      type: \"Polygon\",\n      coordinates: [ring]\n    };\n    ring = rotate = null;\n    return c;\n  }\n  circle.center = function (_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : (0, _constant.default)([+_[0], +_[1]]), circle) : center;\n  };\n  circle.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : (0, _constant.default)(+_), circle) : radius;\n  };\n  circle.precision = function (_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : (0, _constant.default)(+_), circle) : precision;\n  };\n  return circle;\n}"},"sourceMaps":null,"error":null,"hash":"c599bf718a0d0098a66519a2742fcb47","cacheData":{"env":{}}}