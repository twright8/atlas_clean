{"id":"js/components/filters.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741188834651},{"name":"../utils/formatters.js","loc":{"line":5,"column":25,"index":95},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\js\\components\\filters.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\js\\utils\\formatters.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyFilters = applyFilters;\nexports.initializeFilters = initializeFilters;\nexports.isAnyFilterActive = isAnyFilterActive;\nexports.updateResetButtonVisibility = updateResetButtonVisibility;\nvar _formatters = require(\"../utils/formatters.js\");\n/**\n * Filters module\n * Handles all filter-related functionality\n */\n\n/**\n * Initialize all filters\n * @param {Object} state - Application state\n * @param {Function} updateCallback - Function to call when filters change\n */\nfunction initializeFilters(state, updateCallback) {\n  // Initialize Select2 dropdowns for filters\n  initializeSelect2Filters(state, updateCallback);\n\n  // Initialize date picker filters\n  initializeDateFilters(state, updateCallback);\n\n  // Initialize checkbox filters\n  initializeCheckboxFilters(state, updateCallback);\n\n  // Initialize text search\n  initializeTextSearch(updateCallback);\n\n  // Reset filters button\n  initializeResetButton(state, updateCallback);\n\n  // Info tooltips\n  initializeInfoTooltips();\n}\n\n/**\n * Initialize Select2 dropdown filters\n * @param {Object} state - Application state\n * @param {Function} updateCallback - Function to call when filters change\n */\nfunction initializeSelect2Filters(state, updateCallback) {\n  var uniqueCountries = state.uniqueCountries,\n    uniqueCorruptionCategories = state.uniqueCorruptionCategories,\n    uniqueHealthCategories = state.uniqueHealthCategories;\n  initializeSelect2Filter('#countryFilter', uniqueCountries, 'Select multiple', updateCallback);\n  initializeSelect2Filter('#corruptionCategoriesFilter', uniqueCorruptionCategories, 'Select multiple', updateCallback);\n  initializeSelect2Filter('#healthCategoriesFilter', uniqueHealthCategories, 'Select multiple', updateCallback);\n}\n\n/**\n * Initialize a single Select2 filter\n * @param {string} selector - CSS selector for the filter\n * @param {Array} data - Data for the dropdown\n * @param {string} placeholder - Placeholder text\n * @param {Function} updateCallback - Function to call when filters change\n */\nfunction initializeSelect2Filter(selector, data, placeholder, updateCallback) {\n  $(selector).select2({\n    data: data.map(function (item) {\n      return {\n        id: item,\n        text: item\n      };\n    }),\n    placeholder: placeholder\n  }).on('change', function () {\n    updateCallback();\n    updateResetButtonVisibility();\n  });\n}\n\n/**\n * Initialize date range filters\n * @param {Object} state - Application state\n * @param {Function} updateCallback - Function to call when filters change\n */\nfunction initializeDateFilters(state, updateCallback) {\n  var minDate = state.minDate,\n    maxDate = state.maxDate;\n  $('#startDate, #endDate').datepicker({\n    format: 'dd/mm/yy',\n    autoclose: true\n  }).on('changeDate', function () {\n    updateCallback();\n    updateResetButtonVisibility();\n  });\n  $('#startDate').datepicker('setDate', minDate);\n  $('#endDate').datepicker('setDate', maxDate);\n}\n\n/**\n * Initialize checkbox filters\n * @param {Object} state - Application state \n * @param {Function} updateCallback - Function to call when filters change\n */\nfunction initializeCheckboxFilters(state, updateCallback) {\n  var archivedFilter = document.getElementById('archivedFilter');\n  var caseFilter = document.getElementById('caseFilter');\n  var unreliableFilter = document.getElementById('unreliableFilter');\n  var countryLevelFilter = document.getElementById('countryLevelFilter');\n\n  // Set initial state\n  archivedFilter.checked = false;\n  caseFilter.checked = true;\n  unreliableFilter.checked = true;\n  countryLevelFilter.checked = true;\n\n  // Add change event listeners\n  archivedFilter.addEventListener('change', function () {\n    updateCallback();\n    updateResetButtonVisibility();\n  });\n  caseFilter.addEventListener('change', function () {\n    updateCallback();\n    updateResetButtonVisibility();\n  });\n  unreliableFilter.addEventListener('change', function () {\n    updateCallback();\n    updateResetButtonVisibility();\n  });\n  countryLevelFilter.addEventListener('change', function () {\n    // Toggle legend based on filter state\n    if (!this.checked && !state.mapConfig.legendAdded) {\n      state.mapConfig.legend.addTo(state.mapConfig.map);\n      state.mapConfig.legendAdded = true;\n    } else if (this.checked && state.mapConfig.legendAdded) {\n      state.mapConfig.legend.remove();\n      state.mapConfig.legendAdded = false;\n    }\n    updateCallback();\n    updateResetButtonVisibility();\n  });\n}\n\n/**\n * Initialize text search\n * @param {Function} updateCallback - Function to call when filters change\n */\nfunction initializeTextSearch(updateCallback) {\n  $('#search-input').on('input', (0, _formatters.debounce)(function () {\n    updateCallback();\n    updateResetButtonVisibility();\n  }, 500));\n}\n\n/**\n * Initialize reset button\n * @param {Object} state - Application state\n * @param {Function} updateCallback - Function to call when filters change\n */\nfunction initializeResetButton(state, updateCallback) {\n  $('#resetFilters').on('click', function () {\n    if (isAnyFilterActive()) {\n      $('#countryFilter, #corruptionCategoriesFilter, #healthCategoriesFilter').val(null).trigger('change');\n      $('#startDate').datepicker('setDate', state.minDate);\n      $('#endDate').datepicker('setDate', state.maxDate);\n      $('#search-input').val('');\n      document.getElementById('archivedFilter').checked = false;\n      document.getElementById('caseFilter').checked = true;\n      document.getElementById('unreliableFilter').checked = true;\n      document.getElementById('countryLevelFilter').checked = true;\n      updateCallback();\n      updateResetButtonVisibility();\n      if (state.mapConfig.legendAdded) {\n        state.mapConfig.legend.remove();\n        state.mapConfig.legendAdded = false;\n      }\n    }\n  });\n\n  // Initial visibility\n  updateResetButtonVisibility();\n}\n\n/**\n * Check if any filter is active\n * @returns {boolean} True if any filter is active\n */\nfunction isAnyFilterActive() {\n  var _window$appState, _window$appState2;\n  var selectedCountries = $('#countryFilter').val() || [];\n  var selectedCorruptionCategories = $('#corruptionCategoriesFilter').val() || [];\n  var selectedHealthCategories = $('#healthCategoriesFilter').val() || [];\n  var startDate = $('#startDate').datepicker('getDate');\n  var endDate = $('#endDate').datepicker('getDate');\n  var searchTerm = $('#search-input').val().trim();\n  var isArchivedFilterActive = document.getElementById('archivedFilter').checked;\n  var isUnreliableFilterActive = !document.getElementById('unreliableFilter').checked;\n  var isCaseFilterActive = !document.getElementById('caseFilter').checked;\n  var isCountryLevelFilterActive = !document.getElementById('countryLevelFilter').checked;\n\n  // Get min and max dates from the application state\n  // This is a simplification - you'll need to access state properly\n  var minDate = (_window$appState = window.appState) === null || _window$appState === void 0 ? void 0 : _window$appState.minDate;\n  var maxDate = (_window$appState2 = window.appState) === null || _window$appState2 === void 0 ? void 0 : _window$appState2.maxDate;\n  var isDateFilterActive = startDate && minDate && startDate.getTime() !== minDate.getTime() || endDate && maxDate && endDate.getTime() !== maxDate.getTime();\n  return selectedCountries.length > 0 || selectedCorruptionCategories.length > 0 || selectedHealthCategories.length > 0 || isDateFilterActive || searchTerm !== '' || isArchivedFilterActive || isUnreliableFilterActive || isCaseFilterActive || isCountryLevelFilterActive;\n}\n\n/**\n * Update reset button visibility based on filter state\n */\nfunction updateResetButtonVisibility() {\n  if (isAnyFilterActive()) {\n    $('#resetFilters').show();\n  } else {\n    $('#resetFilters').hide();\n  }\n}\n\n/**\n * Initialize info tooltips\n */\nfunction initializeInfoTooltips() {\n  var infoBoxes = {\n    country: \"Country mentioned in the article. This is usually, but not always, where the story occured.\",\n    corruption: \"We used AI to identify when a story is related to a particular theme related to integrity. See our 'About' page for qualifications and limitations.\",\n    health: \"We used AI to identify when a story is related to a particular area of health. See our 'About' page for qualifications and limitations.\",\n    date: \"Set a date range to view which events have happened within a specific time period. Our archived data uses publication date.\",\n    archived: \"When checked, this includes articles collected using our earlier data gathering methods. We've since improved our collection process. Unchecked shows only articles collected with our current methods.\",\n    cased: \"When checked, this filters out general discussions and commentaries to focus on stories about specific corruption cases. Check it to include all articles.\",\n    unreliable: \"We use AI to identify potentially unreliable news stories based on their writing style and content. While keeping this checked can help reduce exposure to low-quality news, please note: The filter works automatically with no human oversight. It may incorrectly flag legitimate stories as unreliable. It may miss unreliable stories. It can reflect biases present in AI training data. Think of it as a helpful but unverified first pass rather than a definitive assessment of reliability.\",\n    countryLevel: \"When checked, this shows only articles where a specific location within the country could be determined. Check it to include articles where only the country-level location was identified.\"\n  };\n  var currentInfoBox = null;\n  function createInfoBox(content, target) {\n    console.log('Creating info box for:', content);\n    if (currentInfoBox) {\n      currentInfoBox.remove();\n    }\n    var infoBox = document.createElement('div');\n    infoBox.className = 'info-box';\n    infoBox.textContent = content;\n    document.body.appendChild(infoBox);\n    var targetRect = target.getBoundingClientRect();\n    infoBox.style.top = \"\".concat(targetRect.bottom + window.scrollY + 5, \"px\");\n    infoBox.style.left = \"\".concat(targetRect.left + window.scrollX - 150, \"px\");\n    infoBox.style.display = 'block';\n    currentInfoBox = infoBox;\n    console.log('Info box created and displayed');\n  }\n  function handleInfoIconClick(e) {\n    console.log('Info icon clicked:', this.id);\n    e.preventDefault();\n    e.stopPropagation();\n    var filterType = this.getAttribute('data-filter');\n    var infoContent = infoBoxes[filterType];\n    createInfoBox(infoContent, this);\n  }\n  var infoIconIds = ['main-info', 'country-info', 'corruption-info', 'health-info', 'date-info', 'archived-info', 'case-info', 'unreliable-info', 'country-level-info'];\n  infoIconIds.forEach(function (id) {\n    var icon = document.getElementById(id);\n    if (icon) {\n      console.log('Attaching click event to:', id);\n      icon.addEventListener('click', handleInfoIconClick);\n      icon.addEventListener('mousedown', function (e) {\n        return e.preventDefault();\n      });\n    } else {\n      console.warn('Info icon not found:', id);\n    }\n  });\n  document.addEventListener('click', function (e) {\n    if (currentInfoBox && !e.target.classList.contains('info-icon')) {\n      console.log('Closing info box');\n      currentInfoBox.remove();\n      currentInfoBox = null;\n    }\n  });\n}\n\n/**\n * Apply filters to data\n * @param {Array} allData - All data\n * @returns {Array} Filtered data\n */\nfunction applyFilters(allData) {\n  console.time('Filtering Data');\n  var selectedCountries = new Set($('#countryFilter').val() || []);\n  var selectedCorruptionCategories = new Set($('#corruptionCategoriesFilter').val() || []);\n  var selectedHealthCategories = new Set($('#healthCategoriesFilter').val() || []);\n  var startDate = $('#startDate').datepicker('getDate');\n  var endDate = $('#endDate').datepicker('getDate');\n  var searchTerm = $('#search-input').val().toLowerCase().trim();\n  var showArchived = document.getElementById('archivedFilter').checked;\n  var showCase = document.getElementById('caseFilter').checked;\n  var unreliableCase = document.getElementById('unreliableFilter').checked;\n  var showCountryLevel = document.getElementById('countryLevelFilter').checked;\n  var filteredData = allData.filter(function (d) {\n    var countryMatch = selectedCountries.size === 0 || selectedCountries.has(d.country);\n    var corruptionCategoryMatch = selectedCorruptionCategories.size === 0 || d['Corruption Categories'].some(function (category) {\n      return selectedCorruptionCategories.has(category);\n    });\n    var healthCategoryMatch = selectedHealthCategories.size === 0 || d['Sector Categories'].some(function (category) {\n      return selectedHealthCategories.has(category);\n    });\n    var dateMatch = true;\n    if (startDate && endDate && d.parsedDate) {\n      dateMatch = d.parsedDate >= startDate && d.parsedDate <= endDate;\n    }\n    var titleMatch = true;\n    if (searchTerm) {\n      var title = d.Title.toLowerCase();\n      if (searchTerm.startsWith('\"') && searchTerm.endsWith('\"')) {\n        titleMatch = title.includes(searchTerm.slice(1, -1));\n      } else {\n        titleMatch = searchTerm.split(' ').every(function (word) {\n          return title.includes(word);\n        });\n      }\n    }\n    var archivedMatch = !showArchived || !d.Archived;\n    var caseMatch = !showCase || d.c_n;\n    var unreliableMatch = !unreliableCase || !d.f_n;\n    var countryLevelMatch = !showCountryLevel || !d.country_level;\n    return countryMatch && corruptionCategoryMatch && healthCategoryMatch && dateMatch && titleMatch && archivedMatch && unreliableMatch && caseMatch && countryLevelMatch;\n  });\n  console.timeEnd('Filtering Data');\n  return filteredData;\n}"},"sourceMaps":null,"error":null,"hash":"f083e0f0a273b917d0669b20f60bd4ad","cacheData":{"env":{}}}