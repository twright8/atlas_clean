{"id":"app.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"./modules/map","loc":{"line":1,"column":27,"index":27},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\app.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\map.js"},{"name":"./modules/data","loc":{"line":2,"column":28,"index":72},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\app.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\data.js"},{"name":"./modules/ui","loc":{"line":3,"column":26,"index":116},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\app.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\ui.js"},{"name":"./modules/table","loc":{"line":4,"column":29,"index":161},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\app.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\table.js"},{"name":"./modules/dashboard","loc":{"line":5,"column":33,"index":213},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\app.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboard.js"}],"generated":{"js":"\"use strict\";\n\nvar mapModule = _interopRequireWildcard(require(\"./modules/map\"));\nvar dataModule = _interopRequireWildcard(require(\"./modules/data\"));\nvar uiModule = _interopRequireWildcard(require(\"./modules/ui\"));\nvar tableModule = _interopRequireWildcard(require(\"./modules/table\"));\nvar dashboardModule = _interopRequireWildcard(require(\"./modules/dashboard\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n// App state\nvar markerMap = new Map();\n\n/**\n * Initialize the application\n */\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.time('Total Initialization');\n  console.log(\"Initialization started\");\n\n  // Initialize UI components\n  uiModule.initializeWelcomeOverlay();\n  uiModule.initializeViewToggle();\n  uiModule.initializeFilterBox();\n  uiModule.initializeInfoIcons();\n\n  // Initialize map\n  mapModule.initializeMap();\n\n  // Initialize data table\n  tableModule.initializeDataTable();\n\n  // Initialize dashboard\n  var dashboardContainer = document.getElementById('dashboard');\n  dashboardModule.initializeDashboard(dashboardContainer);\n\n  // Get filter checkbox elements\n  var archivedFilter = document.getElementById('archivedFilter');\n  var caseFilter = document.getElementById('caseFilter');\n  var unreliableFilter = document.getElementById('unreliableFilter');\n  var countryLevelFilter = document.getElementById('countryLevelFilter');\n\n  // Load data\n  console.time('Data Fetching');\n  dataModule.loadData('./data/loc3.json').then(function (data) {\n    console.timeEnd('Data Fetching');\n    initializeWithData(data, {\n      archivedFilter: archivedFilter,\n      caseFilter: caseFilter,\n      unreliableFilter: unreliableFilter,\n      countryLevelFilter: countryLevelFilter\n    });\n  }).catch(function (error) {\n    return console.error('Error loading data:', error);\n  });\n  console.timeEnd('Total Initialization');\n});\n\n/**\n * Initialize app with loaded data\n * @param {Array} data Loaded data\n * @param {Object} filterElements Filter checkbox DOM elements\n */\nfunction initializeWithData(data, filterElements) {\n  var archivedFilter = filterElements.archivedFilter,\n    caseFilter = filterElements.caseFilter,\n    unreliableFilter = filterElements.unreliableFilter,\n    countryLevelFilter = filterElements.countryLevelFilter;\n\n  // Process the data\n  var dateParser = d3.timeParse(\"%d/%m/%y\");\n  var processedData = dataModule.processData(data, dateParser);\n\n  // Set total count\n  $('.total-count').text(dataModule.formatNumber(processedData.allData.length));\n\n  // Initialize filters\n  initializeFilters(processedData, {\n    archivedFilter: archivedFilter,\n    caseFilter: caseFilter,\n    unreliableFilter: unreliableFilter,\n    countryLevelFilter: countryLevelFilter\n  });\n\n  // Initialize additional UI components that depend on data\n  uiModule.initializeHelpButton();\n  uiModule.initializeShareButtons();\n  uiModule.initializeExportButton(function () {\n    return dataModule.getFilteredData();\n  });\n\n  // Apply initial filter\n  updateFilters();\n}\n\n/**\n * Initialize filter components\n * @param {Object} processedData Processed data object\n * @param {Object} filterElements Filter checkbox DOM elements\n */\nfunction initializeFilters(processedData, filterElements) {\n  var archivedFilter = filterElements.archivedFilter,\n    caseFilter = filterElements.caseFilter,\n    unreliableFilter = filterElements.unreliableFilter,\n    _countryLevelFilter = filterElements.countryLevelFilter;\n  var uniqueCountries = processedData.uniqueCountries,\n    uniqueCorruptionCategories = processedData.uniqueCorruptionCategories,\n    uniqueHealthCategories = processedData.uniqueHealthCategories,\n    minDate = processedData.minDate,\n    maxDate = processedData.maxDate;\n\n  // Initialize select2 dropdowns\n  uiModule.initializeSelect2Filter('#countryFilter', uniqueCountries, 'Select multiple', filterChangeHandler);\n  uiModule.initializeSelect2Filter('#corruptionCategoriesFilter', uniqueCorruptionCategories, 'Select multiple', filterChangeHandler);\n  uiModule.initializeSelect2Filter('#healthCategoriesFilter', uniqueHealthCategories, 'Select multiple', filterChangeHandler);\n\n  // Initialize date pickers\n  uiModule.initializeDatePickers(filterChangeHandler, {\n    minDate: minDate,\n    maxDate: maxDate\n  });\n\n  // Initialize search input\n  uiModule.initializeSearchInput(filterChangeHandler);\n\n  // Initialize filter checkboxes\n  uiModule.initializeFilterCheckboxes({\n    'archivedFilter': function archivedFilter() {\n      updateFilters();\n      updateResetButtonVisibility();\n    },\n    'unreliableFilter': function unreliableFilter() {\n      updateFilters();\n      updateResetButtonVisibility();\n    },\n    'caseFilter': function caseFilter() {\n      updateFilters();\n      updateResetButtonVisibility();\n    },\n    'countryLevelFilter': function countryLevelFilter() {\n      // Show/hide legend based on filter state\n      mapModule.toggleLegend(!_countryLevelFilter.checked);\n      // Update filters\n      updateFilters();\n      updateResetButtonVisibility();\n    }\n  });\n\n  // Initialize reset button\n  uiModule.initializeResetButton(function () {\n    if (isAnyFilterActive()) {\n      $('#countryFilter, #corruptionCategoriesFilter, #healthCategoriesFilter').val(null).trigger('change');\n      $('#startDate').datepicker('setDate', \"01/01/2022\");\n      $('#endDate').datepicker('setDate', maxDate);\n      $('#search-input').val('');\n      archivedFilter.checked = false;\n      caseFilter.checked = true;\n      unreliableFilter.checked = true;\n      _countryLevelFilter.checked = true;\n      updateFilters();\n      updateResetButtonVisibility();\n      mapModule.toggleLegend(false);\n    }\n  });\n}\n\n/**\n * Handler for filter changes\n */\nfunction filterChangeHandler() {\n  updateFilters();\n  updateResetButtonVisibility();\n}\n\n/**\n * Update filters and apply to data\n */\nfunction updateFilters() {\n  // Get filter values\n  var selectedCountries = new Set($('#countryFilter').val() || []);\n  var selectedCorruptionCategories = new Set($('#corruptionCategoriesFilter').val() || []);\n  var selectedHealthCategories = new Set($('#healthCategoriesFilter').val() || []);\n  var startDate = $('#startDate').datepicker('getDate');\n  var endDate = $('#endDate').datepicker('getDate');\n  var searchTerm = $('#search-input').val().toLowerCase().trim();\n  var showArchived = document.getElementById('archivedFilter').checked;\n  var showCase = document.getElementById('caseFilter').checked;\n  var unreliableCase = document.getElementById('unreliableFilter').checked;\n  var showCountryLevel = document.getElementById('countryLevelFilter').checked;\n\n  // Create filter criteria object\n  var filterCriteria = {\n    selectedCountries: selectedCountries,\n    selectedCorruptionCategories: selectedCorruptionCategories,\n    selectedHealthCategories: selectedHealthCategories,\n    startDate: startDate,\n    endDate: endDate,\n    searchTerm: searchTerm,\n    showArchived: showArchived,\n    showCase: showCase,\n    unreliableCase: unreliableCase,\n    showCountryLevel: showCountryLevel\n  };\n\n  // Apply filters\n  var filteredData = dataModule.filterData(filterCriteria);\n\n  // Store the filtered data for reference\n  window.currentFilteredData = filteredData;\n\n  // Update map and table\n  updateMapAndTable();\n}\n\n/**\n * Check if any filter is currently active\n * @returns {Boolean} Whether any filter is active\n */\nfunction isAnyFilterActive() {\n  var dateRange = dataModule.getDateRange();\n  var selectedCountries = $('#countryFilter').val() || [];\n  var selectedCorruptionCategories = $('#corruptionCategoriesFilter').val() || [];\n  var selectedHealthCategories = $('#healthCategoriesFilter').val() || [];\n  var startDate = $('#startDate').datepicker('getDate');\n  var endDate = $('#endDate').datepicker('getDate');\n  var searchTerm = $('#search-input').val().trim();\n  var isArchivedFilterActive = document.getElementById('archivedFilter').checked;\n  var isUnreliableFilterActive = !document.getElementById('unreliableFilter').checked;\n  var isCaseFilterActive = !document.getElementById('caseFilter').checked;\n  var isCountryLevelFilterActive = !document.getElementById('countryLevelFilter').checked;\n\n  // Check if start date is different from default (01/01/2022)\n  var defaultStartDate = new Date(2022, 0, 1); // January 1, 2022\n  var isStartDateChanged = startDate && startDate.getTime() !== defaultStartDate.getTime();\n\n  // Check if end date is different from max date\n  var isEndDateChanged = endDate && dateRange.maxDate && endDate.getTime() !== dateRange.maxDate.getTime();\n  var isDateFilterActive = isStartDateChanged || isEndDateChanged;\n  return selectedCountries.length > 0 || selectedCorruptionCategories.length > 0 || selectedHealthCategories.length > 0 || isDateFilterActive || searchTerm !== '' || isArchivedFilterActive || isUnreliableFilterActive || isCaseFilterActive || isCountryLevelFilterActive;\n}\n\n/**\n * Update reset button visibility\n */\nfunction updateResetButtonVisibility() {\n  uiModule.updateResetButtonVisibility(isAnyFilterActive());\n}\n\n/**\n * Update map markers, data table, and dashboard with filtered data\n */\nfunction updateMapAndTable() {\n  console.time('Updating Map, Table, and Dashboard');\n\n  // Clear existing markers\n  mapModule.clearMarkers();\n  markerMap.clear();\n  var filteredData = dataModule.getFilteredData();\n  var dateRange = dataModule.getDateRange();\n\n  // Update dashboard with filtered data\n  dashboardModule.updateDashboard(filteredData, dateRange);\n  if (filteredData.length > 0) {\n    var chunk = 1000;\n    var index = 0;\n    function addNextChunk() {\n      var limit = Math.min(index + chunk, filteredData.length);\n      var newMarkers = [];\n      for (var i = index; i < limit; i++) {\n        var location = filteredData[i];\n        var uniqueId = \"\".concat(location.lat, \"-\").concat(location.long, \"-\").concat(location.Title);\n        if (!markerMap.has(uniqueId)) {\n          var marker = mapModule.createMarker(location);\n          newMarkers.push(marker);\n          markerMap.set(uniqueId, marker);\n        }\n      }\n      mapModule.addMarkers(newMarkers);\n      index = limit;\n      if (index < filteredData.length) {\n        setTimeout(addNextChunk, 0);\n      } else {\n        mapModule.fitMapToBounds();\n        updateVisibleData();\n      }\n    }\n    addNextChunk();\n  } else {\n    updateVisibleData();\n  }\n  console.timeEnd('Updating Map, Table, and Dashboard');\n}\n\n/**\n * Update visible data in table based on map bounds\n */\nvar updateVisibleData = uiModule.debounce(function () {\n  if (mapModule.isMapMoving()) {\n    return;\n  }\n  var bounds = mapModule.getMapBounds();\n  var visibleData = dataModule.getVisibleData(bounds);\n\n  // Store the visible data for reference\n  window.currentVisibleData = visibleData;\n\n  // Update the data table with the visible data\n  tableModule.updateDataTable(visibleData);\n\n  // Update the dashboard with the visible data\n  if (typeof dashboardModule.updateDashboard === 'function') {\n    var dateRange = dataModule.getDateRange();\n    // Log number of data points being processed\n    console.log(\"Updating dashboard with \".concat(visibleData.length, \" visible data points\"));\n    dashboardModule.updateDashboard(visibleData, dateRange);\n  }\n\n  // Ensure all dashboard charts are updated with the visible data\n  if (document.querySelector('#dashboard').style.display === 'block') {\n    dashboardModule.handleDashboardResize();\n  }\n\n  // Update filter count display\n  $('.filter-count').text(dataModule.formatNumber(visibleData.length));\n}, 1000);\n\n// Make updateVisibleData available to map event handlers\nmapModule.onMoveEnd = updateVisibleData;\n\n// Make updateVisibleData available globally for view switching\nwindow.updateVisibleData = updateVisibleData;\n\n// Function to handle updates when switching to map view\nwindow.updateMapView = function () {\n  // Ensure the callback is set\n  mapModule.onMoveEnd = updateVisibleData;\n\n  // Update map state if needed\n  if (!mapModule.isMapMoving()) {\n    mapModule.fitMapToBounds();\n    updateVisibleData();\n  }\n};\n\n// Make dashboard resize handler available globally\nwindow.handleDashboardResize = function () {\n  dashboardModule.handleDashboardResize();\n};\n\n// Make dashboard force update function available globally\nwindow.forceUpdateDashboard = function () {\n  // Check if we're using visible data from the map\n  var bounds = mapModule.getMapBounds();\n  var visibleData = dataModule.getVisibleData(bounds);\n\n  // Update dashboard with map-visible data\n  if (visibleData.length > 0) {\n    var dateRange = dataModule.getDateRange();\n    dashboardModule.updateDashboard(visibleData, dateRange);\n\n    // Force all charts to update\n    if (typeof dashboardModule.forceUpdateCharts === 'function') {\n      dashboardModule.forceUpdateCharts();\n    }\n  }\n};"},"sourceMaps":null,"error":null,"hash":"4d3d2fd1df6548a6e2f5a2526683599f","cacheData":{"env":{}}}