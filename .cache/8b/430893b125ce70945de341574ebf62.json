{"id":"../node_modules/d3-scale/src/sequential.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\package.json","includedInParent":true,"mtime":1737120275874},{"name":"./continuous","loc":{"line":1,"column":23,"index":23},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\sequential.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\continuous.js"},{"name":"./init","loc":{"line":2,"column":31,"index":71},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\sequential.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\init.js"},{"name":"./linear","loc":{"line":3,"column":24,"index":106},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\sequential.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\linear.js"},{"name":"./log","loc":{"line":4,"column":22,"index":141},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\sequential.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\log.js"},{"name":"./symlog","loc":{"line":5,"column":24,"index":175},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\sequential.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\symlog.js"},{"name":"./pow","loc":{"line":6,"column":21,"index":209},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\sequential.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\pow.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.copy = copy;\nexports.default = sequential;\nexports.sequentialLog = sequentialLog;\nexports.sequentialPow = sequentialPow;\nexports.sequentialSqrt = sequentialSqrt;\nexports.sequentialSymlog = sequentialSymlog;\nvar _continuous = require(\"./continuous\");\nvar _init = require(\"./init\");\nvar _linear = require(\"./linear\");\nvar _log = require(\"./log\");\nvar _symlog = require(\"./symlog\");\nvar _pow = require(\"./pow\");\nfunction transformer() {\n  var x0 = 0,\n    x1 = 1,\n    t0,\n    t1,\n    k10,\n    transform,\n    interpolator = _continuous.identity,\n    clamp = false,\n    unknown;\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n  scale.domain = function (_) {\n    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n  };\n  scale.clamp = function (_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n  scale.interpolator = function (_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n  return function (t) {\n    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n    return scale;\n  };\n}\nfunction copy(source, target) {\n  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());\n}\nfunction sequential() {\n  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));\n  scale.copy = function () {\n    return copy(scale, sequential());\n  };\n  return _init.initInterpolator.apply(scale, arguments);\n}\nfunction sequentialLog() {\n  var scale = (0, _log.loggish)(transformer()).domain([1, 10]);\n  scale.copy = function () {\n    return copy(scale, sequentialLog()).base(scale.base());\n  };\n  return _init.initInterpolator.apply(scale, arguments);\n}\nfunction sequentialSymlog() {\n  var scale = (0, _symlog.symlogish)(transformer());\n  scale.copy = function () {\n    return copy(scale, sequentialSymlog()).constant(scale.constant());\n  };\n  return _init.initInterpolator.apply(scale, arguments);\n}\nfunction sequentialPow() {\n  var scale = (0, _pow.powish)(transformer());\n  scale.copy = function () {\n    return copy(scale, sequentialPow()).exponent(scale.exponent());\n  };\n  return _init.initInterpolator.apply(scale, arguments);\n}\nfunction sequentialSqrt() {\n  return sequentialPow.apply(null, arguments).exponent(0.5);\n}"},"sourceMaps":null,"error":null,"hash":"a548782a778d39dec6814da4cae85abd","cacheData":{"env":{}}}