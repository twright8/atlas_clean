{"id":"js/utils/formatters.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741188834651}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.debounce = debounce;\nexports.dmy = dmy;\nexports.extendDataTableDateSorting = extendDataTableDateSorting;\nexports.formatNumber = formatNumber;\n/**\n * Utility functions for formatting data\n */\n\n/**\n * Format numbers with locale-specific formatting\n * @param {number} num - The number to format\n * @returns {string} Formatted number\n */\nfunction formatNumber(num) {\n  var numberFormatter = new Intl.NumberFormat(undefined, {\n    maximumFractionDigits: 0\n  });\n  return numberFormatter.format(num);\n}\n\n/**\n * Extend DataTable sorting for date formats\n * @param {jQuery} jQuery - jQuery instance\n */\nfunction extendDataTableDateSorting(jQuery) {\n  jQuery.extend(jQuery.fn.dataTableExt.oSort, {\n    \"date-eu-pre\": function dateEuPre(date) {\n      if (date.indexOf(\"Cancelled\") > -1) {\n        date = date.split(\" \")[0];\n      }\n      return dmy(date);\n    },\n    \"date-eu-asc\": function dateEuAsc(a, b) {\n      return a < b ? -1 : a > b ? 1 : 0;\n    },\n    \"date-eu-desc\": function dateEuDesc(a, b) {\n      return a < b ? 1 : a > b ? -1 : 0;\n    }\n  });\n}\n\n/**\n * Parse date in dd/mm/yy format\n * @param {string} date - Date string in dd/mm/yy format\n * @returns {Date} Parsed date\n */\nfunction dmy(date) {\n  // This function was referenced but not defined in the original code\n  // Implementing a simple date parser for dd/mm/yy format\n  if (!date) return null;\n  var parts = date.split('/');\n  if (parts.length !== 3) return 0;\n\n  // Convert to YYYY-MM-DD for proper sorting\n  var day = parseInt(parts[0], 10);\n  var month = parseInt(parts[1], 10) - 1; // JavaScript months are 0-based\n  var year = parseInt(parts[2], 10);\n\n  // Handle 2-digit years\n  if (year < 100) {\n    year += year < 50 ? 2000 : 1900;\n  }\n  return new Date(year, month, day).getTime();\n}\n\n/**\n * Creates a debounce function\n * @param {Function} func - Function to debounce\n * @param {number} wait - Wait time in milliseconds\n * @returns {Function} Debounced function\n */\nfunction debounce(func, wait) {\n  var timeout;\n  return function executedFunction() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var later = function later() {\n      clearTimeout(timeout);\n      func.apply(void 0, args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}"},"sourceMaps":null,"error":null,"hash":"6a891b65dea680a1df93813912cc2ceb","cacheData":{"env":{}}}