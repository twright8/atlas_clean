{"id":"../node_modules/d3-geo/src/centroid.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\package.json","includedInParent":true,"mtime":1737120275660},{"name":"./math.js","loc":{"line":1,"column":79,"index":79},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\centroid.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\math.js"},{"name":"./noop.js","loc":{"line":2,"column":17,"index":110},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\centroid.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\noop.js"},{"name":"./stream.js","loc":{"line":3,"column":19,"index":143},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\centroid.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\stream.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _math = require(\"./math.js\");\nvar _noop = _interopRequireDefault(require(\"./noop.js\"));\nvar _stream = _interopRequireDefault(require(\"./stream.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00,\n  // first point\n  x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: _noop.default,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function () {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function () {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= _math.radians, phi *= _math.radians;\n  var cosPhi = (0, _math.cos)(phi);\n  centroidPointCartesian(cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi));\n}\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= _math.radians, phi *= _math.radians;\n  var cosPhi = (0, _math.cos)(phi);\n  x0 = cosPhi * (0, _math.cos)(lambda);\n  y0 = cosPhi * (0, _math.sin)(lambda);\n  z0 = (0, _math.sin)(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= _math.radians, phi *= _math.radians;\n  var cosPhi = (0, _math.cos)(phi),\n    x = cosPhi * (0, _math.cos)(lambda),\n    y = cosPhi * (0, _math.sin)(lambda),\n    z = (0, _math.sin)(phi),\n    w = (0, _math.atan2)((0, _math.sqrt)((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= _math.radians, phi *= _math.radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = (0, _math.cos)(phi);\n  x0 = cosPhi * (0, _math.cos)(lambda);\n  y0 = cosPhi * (0, _math.sin)(lambda);\n  z0 = (0, _math.sin)(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= _math.radians, phi *= _math.radians;\n  var cosPhi = (0, _math.cos)(phi),\n    x = cosPhi * (0, _math.cos)(lambda),\n    y = cosPhi * (0, _math.sin)(lambda),\n    z = (0, _math.sin)(phi),\n    cx = y0 * z - z0 * y,\n    cy = z0 * x - x0 * z,\n    cz = x0 * y - y0 * x,\n    m = (0, _math.sqrt)(cx * cx + cy * cy + cz * cz),\n    w = (0, _math.asin)(m),\n    // line weight = angle\n    v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\nfunction _default(object) {\n  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;\n  (0, _stream.default)(object, centroidStream);\n  var x = X2,\n    y = Y2,\n    z = Z2,\n    m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < _math.epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < _math.epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < _math.epsilon2) return [NaN, NaN];\n  }\n  return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.asin)(z / (0, _math.sqrt)(m)) * _math.degrees];\n}"},"sourceMaps":null,"error":null,"hash":"8eeb3fdce1db43c8d6a108b486d7522b","cacheData":{"env":{}}}