{"id":"../node_modules/d3-geo/src/rotation.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\package.json","includedInParent":true,"mtime":1737120275660},{"name":"./compose.js","loc":{"line":1,"column":20,"index":20},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\rotation.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\compose.js"},{"name":"./math.js","loc":{"line":2,"column":68,"index":105},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\rotation.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\math.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.rotateRadians = rotateRadians;\nvar _compose = _interopRequireDefault(require(\"./compose.js\"));\nvar _math = require(\"./math.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction rotationIdentity(lambda, phi) {\n  return [(0, _math.abs)(lambda) > _math.pi ? lambda + Math.round(-lambda / _math.tau) * _math.tau : lambda, phi];\n}\nrotationIdentity.invert = rotationIdentity;\nfunction rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= _math.tau) ? deltaPhi || deltaGamma ? (0, _compose.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;\n}\nfunction forwardRotationLambda(deltaLambda) {\n  return function (lambda, phi) {\n    return lambda += deltaLambda, [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];\n  };\n}\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = (0, _math.cos)(deltaPhi),\n    sinDeltaPhi = (0, _math.sin)(deltaPhi),\n    cosDeltaGamma = (0, _math.cos)(deltaGamma),\n    sinDeltaGamma = (0, _math.sin)(deltaGamma);\n  function rotation(lambda, phi) {\n    var cosPhi = (0, _math.cos)(phi),\n      x = (0, _math.cos)(lambda) * cosPhi,\n      y = (0, _math.sin)(lambda) * cosPhi,\n      z = (0, _math.sin)(phi),\n      k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [(0, _math.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), (0, _math.asin)(k * cosDeltaGamma + y * sinDeltaGamma)];\n  }\n  rotation.invert = function (lambda, phi) {\n    var cosPhi = (0, _math.cos)(phi),\n      x = (0, _math.cos)(lambda) * cosPhi,\n      y = (0, _math.sin)(lambda) * cosPhi,\n      z = (0, _math.sin)(phi),\n      k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [(0, _math.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), (0, _math.asin)(k * cosDeltaPhi - x * sinDeltaPhi)];\n  };\n  return rotation;\n}\nfunction _default(rotate) {\n  rotate = rotateRadians(rotate[0] * _math.radians, rotate[1] * _math.radians, rotate.length > 2 ? rotate[2] * _math.radians : 0);\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * _math.radians, coordinates[1] * _math.radians);\n    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;\n  }\n  forward.invert = function (coordinates) {\n    coordinates = rotate.invert(coordinates[0] * _math.radians, coordinates[1] * _math.radians);\n    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;\n  };\n  return forward;\n}"},"sourceMaps":null,"error":null,"hash":"f3397026098d4636e8f81647c0be6220","cacheData":{"env":{}}}