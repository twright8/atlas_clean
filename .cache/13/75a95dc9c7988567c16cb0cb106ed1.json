{"id":"../node_modules/d3-scale/src/band.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\package.json","includedInParent":true,"mtime":1737120275874},{"name":"d3-array","loc":{"line":1,"column":32,"index":32},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\band.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-array\\src\\index.js"},{"name":"./init","loc":{"line":2,"column":24,"index":69},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\band.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\init.js"},{"name":"./ordinal","loc":{"line":3,"column":20,"index":100},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\band.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\ordinal.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = band;\nexports.point = point;\nvar _d3Array = require(\"d3-array\");\nvar _init = require(\"./init\");\nvar _ordinal = _interopRequireDefault(require(\"./ordinal\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction band() {\n  var scale = (0, _ordinal.default)().unknown(undefined),\n    domain = scale.domain,\n    ordinalRange = scale.range,\n    range = [0, 1],\n    step,\n    bandwidth,\n    round = false,\n    paddingInner = 0,\n    paddingOuter = 0,\n    align = 0.5;\n  delete scale.unknown;\n  function rescale() {\n    var n = domain().length,\n      reverse = range[1] < range[0],\n      start = range[reverse - 0],\n      stop = range[1 - reverse];\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = (0, _d3Array.range)(n).map(function (i) {\n      return start + step * i;\n    });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n  scale.domain = function (_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n  scale.range = function (_) {\n    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();\n  };\n  scale.rangeRound = function (_) {\n    return range = [+_[0], +_[1]], round = true, rescale();\n  };\n  scale.bandwidth = function () {\n    return bandwidth;\n  };\n  scale.step = function () {\n    return step;\n  };\n  scale.round = function (_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n  scale.padding = function (_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n  scale.paddingInner = function (_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n  scale.paddingOuter = function (_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n  scale.align = function (_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n  scale.copy = function () {\n    return band(domain(), range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);\n  };\n  return _init.initRange.apply(rescale(), arguments);\n}\nfunction pointish(scale) {\n  var copy = scale.copy;\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n  scale.copy = function () {\n    return pointish(copy());\n  };\n  return scale;\n}\nfunction point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}"},"sourceMaps":null,"error":null,"hash":"23abedafbbc8a8ffef83ec08bbd5862d","cacheData":{"env":{}}}