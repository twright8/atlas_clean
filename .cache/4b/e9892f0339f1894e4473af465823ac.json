{"id":"modules/markers.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"./utils","loc":{"line":5,"column":29,"index":105},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\markers.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\utils.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.initializeMarkerCluster = initializeMarkerCluster;\nexports.setupMapMoveEvents = setupMapMoveEvents;\nexports.updateMapMarkers = updateMapMarkers;\nvar _utils = require(\"./utils\");\n/**\n * Markers module\n * Handles creation and management of map markers\n */\n\n/**\n * Initialize marker cluster group with proper settings\n * @returns {Object} Configured marker cluster group\n */\nfunction initializeMarkerCluster() {\n  // Create marker cluster group with specific settings for proper clustering\n  return L.markerClusterGroup({\n    chunkedLoading: true,\n    chunkInterval: 200,\n    chunkDelay: 50,\n    maxClusterRadius: 80,\n    disableClusteringAtZoom: 16,\n    spiderfyOnMaxZoom: true,\n    // These settings are important for the heat circle appearance\n    iconCreateFunction: function iconCreateFunction(cluster) {\n      var childCount = cluster.getChildCount();\n      var c = ' marker-cluster-';\n      if (childCount < 10) {\n        c += 'small';\n      } else if (childCount < 100) {\n        c += 'medium';\n      } else {\n        c += 'large';\n      }\n      return new L.DivIcon({\n        html: '<div><span>' + childCount + '</span></div>',\n        className: 'marker-cluster' + c,\n        iconSize: new L.Point(40, 40)\n      });\n    }\n  });\n}\n\n/**\n * Update map markers based on filtered data\n * @param {Object} mapConfig - Map configuration object \n * @param {Array} filteredData - Filtered data to display on map\n * @param {Object} state - Application state\n * @param {Function} updateVisibleDataCallback - Callback for updating visible data\n */\nfunction updateMapMarkers(mapConfig, filteredData, state, updateVisibleDataCallback) {\n  console.time('Updating Map and Table');\n\n  // Get markers from mapConfig\n  var markers = mapConfig.markers;\n\n  // Clear existing markers\n  markers.clearLayers();\n  state.markerMap.clear();\n  if (filteredData.length > 0) {\n    var chunk = 1000;\n    var index = 0;\n    function addNextChunk() {\n      var limit = Math.min(index + chunk, filteredData.length);\n      var newMarkers = [];\n      for (var i = index; i < limit; i++) {\n        var location = filteredData[i];\n        var uniqueId = \"\".concat(location.lat, \"-\").concat(location.long, \"-\").concat(location.Title);\n        if (!state.markerMap.has(uniqueId)) {\n          // Create marker with popup\n          var icon = location.country_level ? L.divIcon({\n            className: 'custom-div-icon',\n            html: '<i style=\"color: #e5007d;\" class=\"fa fa-map-marker fa-3x\"></i>',\n            iconSize: [30, 42],\n            iconAnchor: [15, 42]\n          }) : L.divIcon({\n            className: 'custom-div-icon',\n            html: '<i style=\"color: #3694d1;\" class=\"fa fa-map-marker fa-3x\"></i>',\n            iconSize: [30, 42],\n            iconAnchor: [15, 42]\n          });\n\n          // Handle potential missing values safely\n          var title = location.Title || 'No Title';\n          var country = location.country || 'Unknown';\n          var url = location.url || '#';\n          var date = location['Date'] || 'Unknown Date';\n          var corruptionCategories = Array.isArray(location['Corruption Categories']) ? String(location['Corruption Categories']).replace(/,(?=[^\\s])/g, ', ') : '';\n          var sectorCategories = Array.isArray(location['Sector Categories']) ? String(location['Sector Categories']).replace(/,(?=[^\\s])/g, ', ') : '';\n          var marker = L.marker([location.lat, location.long], {\n            icon: icon\n          }).bindPopup(\"\\n                            <div class=\\\"popup-content\\\">\\n                                <h3 class=\\\"popup-title\\\">\\\"\".concat(title, \"\\\"</h3>\\n                                <div class=\\\"popup-details\\\">\\n                                    <p><strong>Country:</strong> \").concat(country, \"</p>\\n                                    <p><strong>URL:</strong> \").concat(url !== '#' ? \"<a href=\\\"\".concat(url, \"\\\" target=\\\"_blank\\\">Link</a>\") : 'No URL', \"</p>\\n                                    <p><strong>Date:</strong> \").concat(date, \"</p>\\n                                    <p><strong>Integrity Area:</strong> \").concat(corruptionCategories, \"</p>\\n                                    <p><strong>Sector Area:</strong> \").concat(sectorCategories, \"</p>\\n                                </div>\\n                            </div>\\n                        \"));\n          newMarkers.push(marker);\n          state.markerMap.set(uniqueId, marker);\n        }\n      }\n\n      // Add markers in batch for better performance\n      markers.addLayers(newMarkers);\n      index = limit;\n      if (index < filteredData.length) {\n        setTimeout(addNextChunk, 0);\n      } else {\n        // Only fit bounds if we have valid bounds\n        if (markers.getBounds().isValid()) {\n          mapConfig.map.fitBounds(markers.getBounds());\n        }\n        if (typeof updateVisibleDataCallback === 'function') {\n          updateVisibleDataCallback();\n        }\n      }\n    }\n    addNextChunk();\n  } else {\n    if (typeof updateVisibleDataCallback === 'function') {\n      updateVisibleDataCallback();\n    }\n  }\n  console.timeEnd('Updating Map and Table');\n}\n\n/**\n * Set up map move events to update visible data\n * @param {Object} mapConfig - Map configuration \n * @param {Function} getFilteredData - Function to get current filtered data\n * @param {Object} dataTable - DataTable instance\n * @returns {Function} The update visible data function\n */\nfunction setupMapMoveEvents(mapConfig, getFilteredData, dataTable) {\n  // Function to update data table with data visible in current map bounds\n  var updateVisibleData = function updateVisibleData() {\n    console.time('Updating Visible Data');\n    if (mapConfig.isMapMoving()) {\n      return;\n    }\n    var bounds = mapConfig.getMapBounds();\n    var filteredData = getFilteredData();\n    var visibleData = filteredData.filter(function (d) {\n      return bounds.contains(L.latLng(d.lat, d.long));\n    });\n    dataTable.clear().rows.add(visibleData).draw();\n    $('.filter-count').text((0, _utils.formatNumber)(visibleData.length));\n    console.timeEnd('Updating Visible Data');\n  };\n\n  // Debounced function to avoid too many updates when moving the map\n  var debouncedUpdate = debounce(updateVisibleData, 300);\n\n  // Set up event handlers\n  mapConfig.map.on('moveend', debouncedUpdate);\n  return debouncedUpdate;\n}\n\n/**\n * Utility function to debounce function calls\n * @param {Function} func - Function to debounce \n * @param {Number} wait - Wait time in ms\n * @returns {Function} Debounced function\n */\nfunction debounce(func, wait) {\n  var timeout;\n  return function () {\n    var context = this;\n    var args = arguments;\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      func.apply(context, args);\n    }, wait);\n  };\n}\n\n/**\n * Module exports\n */\nvar _default = exports.default = {\n  initializeMarkerCluster: initializeMarkerCluster,\n  updateMapMarkers: updateMapMarkers,\n  setupMapMoveEvents: setupMapMoveEvents\n};"},"sourceMaps":null,"error":null,"hash":"0980bf222a81cda3c34da6ac6ab639bb","cacheData":{"env":{}}}