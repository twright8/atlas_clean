{"id":"../node_modules/d3-voronoi/src/Diagram.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\package.json","includedInParent":true,"mtime":1737120276105},{"name":"./Beach","loc":{"line":1,"column":36,"index":36},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Diagram.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Beach.js"},{"name":"./Cell","loc":{"line":2,"column":62,"index":110},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Diagram.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Cell.js"},{"name":"./Circle","loc":{"line":3,"column":26,"index":147},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Diagram.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Circle.js"},{"name":"./Edge","loc":{"line":4,"column":24,"index":184},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Diagram.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Edge.js"},{"name":"./RedBlackTree","loc":{"line":5,"column":25,"index":220},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Diagram.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\RedBlackTree.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.circles = exports.cells = exports.beaches = void 0;\nexports.default = Diagram;\nexports.epsilon2 = exports.epsilon = exports.edges = void 0;\nvar _Beach = require(\"./Beach\");\nvar _Cell = require(\"./Cell\");\nvar _Circle = require(\"./Circle\");\nvar _Edge = require(\"./Edge\");\nvar _RedBlackTree = _interopRequireDefault(require(\"./RedBlackTree\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar epsilon = exports.epsilon = 1e-6;\nvar epsilon2 = exports.epsilon2 = 1e-12;\nvar beaches;\nvar cells;\nvar circles;\nvar edges;\nfunction triangleArea(a, b, c) {\n  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n}\nfunction lexicographic(a, b) {\n  return b[1] - a[1] || b[0] - a[0];\n}\nfunction Diagram(sites, extent) {\n  var site = sites.sort(lexicographic).pop(),\n    x,\n    y,\n    circle;\n  exports.edges = edges = [];\n  exports.cells = cells = new Array(sites.length);\n  exports.beaches = beaches = new _RedBlackTree.default();\n  exports.circles = circles = new _RedBlackTree.default();\n  while (true) {\n    circle = _Circle.firstCircle;\n    if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {\n      if (site[0] !== x || site[1] !== y) {\n        (0, _Beach.addBeach)(site);\n        x = site[0], y = site[1];\n      }\n      site = sites.pop();\n    } else if (circle) {\n      (0, _Beach.removeBeach)(circle.arc);\n    } else {\n      break;\n    }\n  }\n  (0, _Cell.sortCellHalfedges)();\n  if (extent) {\n    var x0 = +extent[0][0],\n      y0 = +extent[0][1],\n      x1 = +extent[1][0],\n      y1 = +extent[1][1];\n    (0, _Edge.clipEdges)(x0, y0, x1, y1);\n    (0, _Cell.clipCells)(x0, y0, x1, y1);\n  }\n  this.edges = edges;\n  this.cells = cells;\n  exports.beaches = beaches = exports.circles = circles = exports.edges = edges = exports.cells = cells = null;\n}\nDiagram.prototype = {\n  constructor: Diagram,\n  polygons: function () {\n    var edges = this.edges;\n    return this.cells.map(function (cell) {\n      var polygon = cell.halfedges.map(function (i) {\n        return (0, _Cell.cellHalfedgeStart)(cell, edges[i]);\n      });\n      polygon.data = cell.site.data;\n      return polygon;\n    });\n  },\n  triangles: function () {\n    var triangles = [],\n      edges = this.edges;\n    this.cells.forEach(function (cell, i) {\n      if (!(m = (halfedges = cell.halfedges).length)) return;\n      var site = cell.site,\n        halfedges,\n        j = -1,\n        m,\n        s0,\n        e1 = edges[halfedges[m - 1]],\n        s1 = e1.left === site ? e1.right : e1.left;\n      while (++j < m) {\n        s0 = s1;\n        e1 = edges[halfedges[j]];\n        s1 = e1.left === site ? e1.right : e1.left;\n        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n          triangles.push([site.data, s0.data, s1.data]);\n        }\n      }\n    });\n    return triangles;\n  },\n  links: function () {\n    return this.edges.filter(function (edge) {\n      return edge.right;\n    }).map(function (edge) {\n      return {\n        source: edge.left.data,\n        target: edge.right.data\n      };\n    });\n  },\n  find: function (x, y, radius) {\n    var that = this,\n      i0,\n      i1 = that._found || 0,\n      n = that.cells.length,\n      cell;\n\n    // Use the previously-found cell, or start with an arbitrary one.\n    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;\n    var dx = x - cell.site[0],\n      dy = y - cell.site[1],\n      d2 = dx * dx + dy * dy;\n\n    // Traverse the half-edges to find a closer cell, if any.\n    do {\n      cell = that.cells[i0 = i1], i1 = null;\n      cell.halfedges.forEach(function (e) {\n        var edge = that.edges[e],\n          v = edge.left;\n        if ((v === cell.site || !v) && !(v = edge.right)) return;\n        var vx = x - v[0],\n          vy = y - v[1],\n          v2 = vx * vx + vy * vy;\n        if (v2 < d2) d2 = v2, i1 = v.index;\n      });\n    } while (i1 !== null);\n    that._found = i0;\n    return radius == null || d2 <= radius * radius ? cell.site : null;\n  }\n};"},"sourceMaps":null,"error":null,"hash":"8e0decacf86fbefca534aa81890c74b5","cacheData":{"env":{}}}