{"id":"modules/dashboardCharts.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"d3","loc":{"line":4,"column":20,"index":73},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboardCharts.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.initializeCategoryChart = initializeCategoryChart;\nexports.initializeTimeSeriesChart = initializeTimeSeriesChart;\nexports.initializeTopCountriesChart = initializeTopCountriesChart;\nexports.updateCategoryChart = updateCategoryChart;\nexports.updateTimeSeriesChart = updateTimeSeriesChart;\nexports.updateTopCountriesChart = updateTopCountriesChart;\nvar d3 = _interopRequireWildcard(require(\"d3\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; } /**\n * Module for dashboard chart visualizations\n */\n// Chart references\nvar timeSeriesChart;\nvar categoryChart;\nvar topCountriesChart;\n\n/**\n * Initialize the time series chart\n * @returns {Object} The chart reference\n */\nfunction initializeTimeSeriesChart() {\n  var container = d3.select('#time-series-chart');\n\n  // Set up dimensions and margins\n  var margin = {\n    top: 20,\n    right: 30,\n    bottom: 50,\n    left: 60\n  };\n  var containerWidth = document.getElementById('time-series-chart').clientWidth || 500;\n  var width = Math.max(containerWidth - margin.left - margin.right, 100);\n  var height = 250 - margin.top - margin.bottom;\n\n  // Create SVG\n  var svg = container.append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', \"translate(\".concat(margin.left, \",\").concat(margin.top, \")\"));\n\n  // Add X axis placeholder\n  svg.append('g').attr('class', 'x-axis').attr('transform', \"translate(0,\".concat(height, \")\")).append('text').attr('y', 40).attr('x', width / 2).attr('fill', '#333').style('text-anchor', 'middle').text('Date');\n\n  // Add Y axis placeholder\n  svg.append('g').attr('class', 'y-axis').append('text').attr('transform', 'rotate(-90)').attr('y', -40).attr('x', -height / 2).attr('fill', '#333').style('text-anchor', 'middle').text('Articles');\n\n  // Store reference to chart\n  timeSeriesChart = svg;\n  return svg;\n}\n\n/**\n * Initialize the category breakdown chart\n * @returns {Object} The chart reference\n */\nfunction initializeCategoryChart() {\n  var container = d3.select('#category-chart');\n\n  // Set up dimensions and margins\n  var margin = {\n    top: 20,\n    right: 30,\n    bottom: 50,\n    left: 160\n  };\n  var containerWidth = document.getElementById('category-chart').clientWidth || 500;\n  var width = Math.max(containerWidth - margin.left - margin.right, 100);\n  var height = 250 - margin.top - margin.bottom;\n\n  // Create SVG\n  var svg = container.append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', \"translate(\".concat(margin.left, \",\").concat(margin.top, \")\"));\n\n  // Add X axis placeholder\n  svg.append('g').attr('class', 'x-axis').attr('transform', \"translate(0,\".concat(height, \")\")).append('text').attr('y', 40).attr('x', width / 2).attr('fill', '#333').style('text-anchor', 'middle').text('Count');\n\n  // Add Y axis placeholder\n  svg.append('g').attr('class', 'y-axis');\n\n  // Store reference to chart\n  categoryChart = svg;\n  return svg;\n}\n\n/**\n * Initialize the top countries chart\n * @returns {Object} The chart reference\n */\nfunction initializeTopCountriesChart() {\n  var container = d3.select('#top-countries-chart');\n\n  // Set up dimensions and margins\n  var margin = {\n    top: 20,\n    right: 30,\n    bottom: 50,\n    left: 100\n  };\n  var containerWidth = document.getElementById('top-countries-chart').clientWidth || 500;\n  var width = Math.max(containerWidth - margin.left - margin.right, 100);\n  var height = 250 - margin.top - margin.bottom;\n\n  // Create SVG\n  var svg = container.append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', \"translate(\".concat(margin.left, \",\").concat(margin.top, \")\"));\n\n  // Add X axis placeholder\n  svg.append('g').attr('class', 'x-axis').attr('transform', \"translate(0,\".concat(height, \")\")).append('text').attr('y', 40).attr('x', width / 2).attr('fill', '#333').style('text-anchor', 'middle').text('Articles');\n\n  // Add Y axis placeholder\n  svg.append('g').attr('class', 'y-axis');\n\n  // Store reference to chart\n  topCountriesChart = svg;\n  return svg;\n}\n\n/**\n * Update the time series chart with data\n * @param {Object} chart The chart reference\n * @param {Array} data Filtered data array\n * @param {Object} dateRange Object with minDate and maxDate\n */\nfunction updateTimeSeriesChart(chart, data, dateRange) {\n  // Group data by month\n  var timeData = d3.nest().key(function (d) {\n    var date = d.parsedDate;\n    return date ? d3.timeFormat('%Y-%m')(date) : 'Unknown';\n  }).rollup(function (v) {\n    return v.length;\n  }).entries(data).filter(function (d) {\n    return d.key !== 'Unknown';\n  }).sort(function (a, b) {\n    return d3.ascending(a.key, b.key);\n  });\n  if (timeData.length === 0) return;\n\n  // Convert string dates back to Date objects for the chart\n  timeData.forEach(function (d) {\n    d.date = d3.timeParse('%Y-%m')(d.key);\n  });\n\n  // Set up dimensions and margins\n  var margin = {\n    top: 20,\n    right: 30,\n    bottom: 50,\n    left: 60\n  };\n  var containerWidth = document.getElementById('time-series-chart').clientWidth || 500;\n  var width = Math.max(containerWidth - margin.left - margin.right, 100);\n  var height = 250 - margin.top - margin.bottom;\n\n  // Set scales\n  var x = d3.scaleTime().domain(d3.extent(timeData, function (d) {\n    return d.date;\n  })).range([0, width]);\n  var y = d3.scaleLinear().domain([0, d3.max(timeData, function (d) {\n    return d.value;\n  }) * 1.1]).range([height, 0]);\n\n  // Update axes\n  chart.select('.x-axis').call(d3.axisBottom(x).ticks(Math.min(timeData.length, 10)).tickFormat(d3.timeFormat('%b %Y'))).selectAll('text').style('text-anchor', 'end').attr('dx', '-.8em').attr('dy', '.15em').attr('transform', 'rotate(-45)');\n  chart.select('.y-axis').call(d3.axisLeft(y));\n\n  // Remove existing line and dots\n  chart.selectAll('.line-path').remove();\n  chart.selectAll('.data-point').remove();\n  chart.selectAll('.hover-area').remove();\n\n  // Create line\n  var line = d3.line().x(function (d) {\n    return x(d.date);\n  }).y(function (d) {\n    return y(d.value);\n  }).curve(d3.curveMonotoneX);\n  chart.append('path').datum(timeData).attr('class', 'line-path').attr('fill', 'none').attr('stroke', '#3694d1').attr('stroke-width', 2).attr('d', line);\n\n  // Add data points\n  chart.selectAll('.data-point').data(timeData).enter().append('circle').attr('class', 'data-point').attr('cx', function (d) {\n    return x(d.date);\n  }).attr('cy', function (d) {\n    return y(d.value);\n  }).attr('r', 4).attr('fill', '#e5007d');\n\n  // Add hover area with tooltips\n  chart.append('g').attr('class', 'hover-area').selectAll('rect').data(timeData).enter().append('rect').attr('x', function (d) {\n    return x(d.date) - width / (2 * timeData.length);\n  }).attr('y', 0).attr('width', width / timeData.length).attr('height', height).attr('fill', 'transparent').on('mouseover', function (d) {\n    var tooltip = d3.select('#time-series-chart').append('div').attr('class', 'chart-tooltip').style('position', 'absolute').style('background', 'rgba(255,255,255,0.9)').style('padding', '8px').style('border-radius', '4px').style('border', '1px solid #ddd').style('box-shadow', '0 2px 4px rgba(0,0,0,0.1)').style('pointer-events', 'none').style('z-index', 999).style('left', \"\".concat(d3.event.pageX - d3.select('#time-series-chart').node().getBoundingClientRect().left, \"px\")).style('top', \"\".concat(d3.event.pageY - d3.select('#time-series-chart').node().getBoundingClientRect().top - 40, \"px\"));\n    tooltip.html(\"\\n                <div><strong>\".concat(d3.timeFormat('%B %Y')(d.date), \"</strong></div>\\n                <div>Articles: \").concat(d.value, \"</div>\\n            \"));\n  }).on('mouseout', function () {\n    d3.selectAll('.chart-tooltip').remove();\n  });\n}\n\n/**\n * Update the category breakdown chart with data\n * @param {Object} chart The chart reference\n * @param {Array} data Filtered data array\n */\nfunction updateCategoryChart(chart, data) {\n  // Flatten and count all corruption categories\n  var categoryData = [];\n  var categoryCounts = {};\n  data.forEach(function (item) {\n    if (Array.isArray(item['Corruption Categories'])) {\n      item['Corruption Categories'].forEach(function (category) {\n        if (category && category.trim()) {\n          categoryCounts[category] = (categoryCounts[category] || 0) + 1;\n        }\n      });\n    }\n  });\n\n  // Convert to array format for D3\n  Object.entries(categoryCounts).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      category = _ref2[0],\n      count = _ref2[1];\n    categoryData.push({\n      category: category,\n      count: count\n    });\n  });\n\n  // Sort by count descending and limit to top 10\n  categoryData.sort(function (a, b) {\n    return b.count - a.count;\n  });\n  var topCategories = categoryData.slice(0, 10);\n  if (topCategories.length === 0) return;\n\n  // Set up dimensions and margins\n  var margin = {\n    top: 20,\n    right: 30,\n    bottom: 50,\n    left: 160\n  };\n  var containerWidth = document.getElementById('category-chart').clientWidth || 500;\n  var width = Math.max(containerWidth - margin.left - margin.right, 100);\n  var height = 250 - margin.top - margin.bottom;\n\n  // Set scales\n  var x = d3.scaleLinear().domain([0, d3.max(topCategories, function (d) {\n    return d.count;\n  }) * 1.1]).range([0, width]);\n  var y = d3.scaleBand().domain(topCategories.map(function (d) {\n    return d.category;\n  })).range([0, height]).padding(0.1);\n\n  // Update axes\n  chart.select('.x-axis').call(d3.axisBottom(x).ticks(5));\n  chart.select('.y-axis').call(d3.axisLeft(y)).selectAll('text').style('text-anchor', 'end');\n\n  // Remove existing bars\n  chart.selectAll('.category-bar').remove();\n\n  // Create bars\n  chart.selectAll('.category-bar').data(topCategories).enter().append('rect').attr('class', 'category-bar').attr('x', 0).attr('y', function (d) {\n    return y(d.category);\n  }).attr('width', function (d) {\n    return x(d.count);\n  }).attr('height', y.bandwidth()).attr('fill', '#3694d1').on('mouseover', function (d) {\n    d3.select(this).attr('fill', '#e5007d');\n    var tooltip = d3.select('#category-chart').append('div').attr('class', 'chart-tooltip').style('position', 'absolute').style('background', 'rgba(255,255,255,0.9)').style('padding', '8px').style('border-radius', '4px').style('border', '1px solid #ddd').style('box-shadow', '0 2px 4px rgba(0,0,0,0.1)').style('pointer-events', 'none').style('z-index', 999).style('left', \"\".concat(d3.event.pageX - d3.select('#category-chart').node().getBoundingClientRect().left, \"px\")).style('top', \"\".concat(d3.event.pageY - d3.select('#category-chart').node().getBoundingClientRect().top - 40, \"px\"));\n    tooltip.html(\"\\n                <div><strong>\".concat(d.category, \"</strong></div>\\n                <div>Articles: \").concat(d.count, \"</div>\\n                <div>Percentage: \").concat((d.count / data.length * 100).toFixed(1), \"%</div>\\n            \"));\n  }).on('mouseout', function () {\n    d3.select(this).attr('fill', '#3694d1');\n    d3.selectAll('.chart-tooltip').remove();\n  });\n\n  // Add count labels\n  chart.selectAll('.count-label').data(topCategories).enter().append('text').attr('class', 'count-label').attr('x', function (d) {\n    return x(d.count) + 5;\n  }).attr('y', function (d) {\n    return y(d.category) + y.bandwidth() / 2 + 5;\n  }).text(function (d) {\n    return d.count;\n  }).attr('fill', '#333').attr('font-size', '12px');\n}\n\n/**\n * Update the top countries chart with data\n * @param {Object} chart The chart reference\n * @param {Array} data Filtered data array\n */\nfunction updateTopCountriesChart(chart, data) {\n  // Count articles by country\n  var countryData = [];\n  var countryCounts = {};\n  data.forEach(function (item) {\n    if (item.country && item.country.trim()) {\n      countryCounts[item.country] = (countryCounts[item.country] || 0) + 1;\n    }\n  });\n\n  // Convert to array format for D3\n  Object.entries(countryCounts).forEach(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      country = _ref4[0],\n      count = _ref4[1];\n    countryData.push({\n      country: country,\n      count: count\n    });\n  });\n\n  // Sort by count descending and limit to top 10\n  countryData.sort(function (a, b) {\n    return b.count - a.count;\n  });\n  var topCountries = countryData.slice(0, 10);\n  if (topCountries.length === 0) return;\n\n  // Set up dimensions and margins\n  var margin = {\n    top: 20,\n    right: 30,\n    bottom: 50,\n    left: 100\n  };\n  var containerWidth = document.getElementById('top-countries-chart').clientWidth || 500;\n  var width = Math.max(containerWidth - margin.left - margin.right, 100);\n  var height = 250 - margin.top - margin.bottom;\n\n  // Set scales\n  var x = d3.scaleLinear().domain([0, d3.max(topCountries, function (d) {\n    return d.count;\n  }) * 1.1]).range([0, width]);\n  var y = d3.scaleBand().domain(topCountries.map(function (d) {\n    return d.country;\n  })).range([0, height]).padding(0.1);\n\n  // Update axes\n  chart.select('.x-axis').call(d3.axisBottom(x).ticks(5));\n  chart.select('.y-axis').call(d3.axisLeft(y)).selectAll('text').style('text-anchor', 'end');\n\n  // Remove existing bars\n  chart.selectAll('.country-bar').remove();\n\n  // Create bars\n  chart.selectAll('.country-bar').data(topCountries).enter().append('rect').attr('class', 'country-bar').attr('x', 0).attr('y', function (d) {\n    return y(d.country);\n  }).attr('width', function (d) {\n    return x(d.count);\n  }).attr('height', y.bandwidth()).attr('fill', '#e5007d').on('mouseover', function (d) {\n    d3.select(this).attr('fill', '#3694d1');\n    var tooltip = d3.select('#top-countries-chart').append('div').attr('class', 'chart-tooltip').style('position', 'absolute').style('background', 'rgba(255,255,255,0.9)').style('padding', '8px').style('border-radius', '4px').style('border', '1px solid #ddd').style('box-shadow', '0 2px 4px rgba(0,0,0,0.1)').style('pointer-events', 'none').style('z-index', 999).style('left', \"\".concat(d3.event.pageX - d3.select('#top-countries-chart').node().getBoundingClientRect().left, \"px\")).style('top', \"\".concat(d3.event.pageY - d3.select('#top-countries-chart').node().getBoundingClientRect().top - 40, \"px\"));\n    tooltip.html(\"\\n                <div><strong>\".concat(d.country, \"</strong></div>\\n                <div>Articles: \").concat(d.count, \"</div>\\n                <div>Percentage: \").concat((d.count / data.length * 100).toFixed(1), \"%</div>\\n            \"));\n  }).on('mouseout', function () {\n    d3.select(this).attr('fill', '#e5007d');\n    d3.selectAll('.chart-tooltip').remove();\n  });\n\n  // Add count labels\n  chart.selectAll('.count-label').data(topCountries).enter().append('text').attr('class', 'count-label').attr('x', function (d) {\n    return x(d.count) + 5;\n  }).attr('y', function (d) {\n    return y(d.country) + y.bandwidth() / 2 + 5;\n  }).text(function (d) {\n    return d.count;\n  }).attr('fill', '#333').attr('font-size', '12px');\n}\nvar _default = exports.default = {\n  initializeTimeSeriesChart: initializeTimeSeriesChart,\n  initializeCategoryChart: initializeCategoryChart,\n  initializeTopCountriesChart: initializeTopCountriesChart,\n  updateTimeSeriesChart: updateTimeSeriesChart,\n  updateCategoryChart: updateCategoryChart,\n  updateTopCountriesChart: updateTopCountriesChart\n};"},"sourceMaps":null,"error":null,"hash":"3850c846b98084816d41a6e0b37dddf1","cacheData":{"env":{}}}