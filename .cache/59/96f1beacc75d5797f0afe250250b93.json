{"id":"../node_modules/d3-format/src/locale.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\package.json","includedInParent":true,"mtime":1737120275644},{"name":"./exponent.js","loc":{"line":1,"column":21,"index":21},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\locale.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\exponent.js"},{"name":"./formatGroup.js","loc":{"line":2,"column":24,"index":63},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\locale.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\formatGroup.js"},{"name":"./formatNumerals.js","loc":{"line":3,"column":27,"index":111},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\locale.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\formatNumerals.js"},{"name":"./formatSpecifier.js","loc":{"line":4,"column":28,"index":163},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\locale.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\formatSpecifier.js"},{"name":"./formatTrim.js","loc":{"line":5,"column":23,"index":211},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\locale.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\formatTrim.js"},{"name":"./formatTypes.js","loc":{"line":6,"column":24,"index":255},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\locale.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\formatTypes.js"},{"name":"./formatPrefixAuto.js","loc":{"line":7,"column":29,"index":305},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\locale.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\formatPrefixAuto.js"},{"name":"./identity.js","loc":{"line":8,"column":21,"index":352},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\locale.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-format\\src\\identity.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _exponent = _interopRequireDefault(require(\"./exponent.js\"));\nvar _formatGroup = _interopRequireDefault(require(\"./formatGroup.js\"));\nvar _formatNumerals = _interopRequireDefault(require(\"./formatNumerals.js\"));\nvar _formatSpecifier = _interopRequireDefault(require(\"./formatSpecifier.js\"));\nvar _formatTrim = _interopRequireDefault(require(\"./formatTrim.js\"));\nvar _formatTypes = _interopRequireDefault(require(\"./formatTypes.js\"));\nvar _formatPrefixAuto = require(\"./formatPrefixAuto.js\");\nvar _identity = _interopRequireDefault(require(\"./identity.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar map = Array.prototype.map,\n  prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\nfunction _default(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + \"\"),\n    currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n    currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n    decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n    numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),\n    percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n    minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\n    nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n  function newFormat(specifier) {\n    specifier = (0, _formatSpecifier.default)(specifier);\n    var fill = specifier.fill,\n      align = specifier.align,\n      sign = specifier.sign,\n      symbol = specifier.symbol,\n      zero = specifier.zero,\n      width = specifier.width,\n      comma = specifier.comma,\n      precision = specifier.precision,\n      trim = specifier.trim,\n      type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n      suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = _formatTypes.default[type],\n      maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n    function format(value) {\n      var valuePrefix = prefix,\n        valueSuffix = suffix,\n        i,\n        n,\n        c;\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = (0, _formatTrim.default)(value);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : minus : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n        padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n      return numerals(value);\n    }\n    format.toString = function () {\n      return specifier + \"\";\n    };\n    return format;\n  }\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = \"f\", specifier)),\n      e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,\n      k = Math.pow(10, -e),\n      prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}"},"sourceMaps":null,"error":null,"hash":"31e32f48d1b9926542ec6c693887d21a","cacheData":{"env":{}}}