{"id":"../node_modules/d3-geo/src/projection/equalEarth.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\package.json","includedInParent":true,"mtime":1737120275660},{"name":"./index.js","loc":{"line":1,"column":23,"index":23},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\equalEarth.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\index.js"},{"name":"../math.js","loc":{"line":2,"column":50,"index":88},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\equalEarth.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\math.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.equalEarthRaw = equalEarthRaw;\nvar _index = _interopRequireDefault(require(\"./index.js\"));\nvar _math = require(\"../math.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar A1 = 1.340264,\n  A2 = -0.081106,\n  A3 = 0.000893,\n  A4 = 0.003796,\n  M = (0, _math.sqrt)(3) / 2,\n  iterations = 12;\nfunction equalEarthRaw(lambda, phi) {\n  var l = (0, _math.asin)(M * (0, _math.sin)(phi)),\n    l2 = l * l,\n    l6 = l2 * l2 * l2;\n  return [lambda * (0, _math.cos)(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];\n}\nequalEarthRaw.invert = function (x, y) {\n  var l = y,\n    l2 = l * l,\n    l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if ((0, _math.abs)(delta) < _math.epsilon2) break;\n  }\n  return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / (0, _math.cos)(l), (0, _math.asin)((0, _math.sin)(l) / M)];\n};\nfunction _default() {\n  return (0, _index.default)(equalEarthRaw).scale(177.158);\n}"},"sourceMaps":null,"error":null,"hash":"bc43dbdded175573a6c21cf9a8b6a86b","cacheData":{"env":{}}}