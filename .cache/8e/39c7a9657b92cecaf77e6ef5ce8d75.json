{"id":"modules/data.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741867771361}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.filterData = filterData;\nexports.formatNumber = formatNumber;\nexports.getDateRange = getDateRange;\nexports.getFilteredData = getFilteredData;\nexports.getVisibleData = getVisibleData;\nexports.loadData = loadData;\nexports.processData = processData;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Module for handling data loading, processing, and filter operations\n */\n\n// State variables\nvar allData = [];\nvar filteredData = [];\nvar minDate, maxDate;\n\n/**\n * Format numbers with thousand separators\n * @param {Number} num The number to format\n * @returns {String} Formatted number\n */\nfunction formatNumber(num) {\n  var numberFormatter = new Intl.NumberFormat(undefined, {\n    maximumFractionDigits: 0\n  });\n  return numberFormatter.format(num);\n}\n\n/**\n * Load data from the specified URL\n * @param {String} url URL to fetch data from\n * @returns {Promise} Promise that resolves with the loaded data\n */\nfunction loadData(url) {\n  console.time('Data Fetching');\n  return fetch(url).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.timeEnd('Data Fetching');\n    return data;\n  }).catch(function (error) {\n    console.error('Error loading data:', error);\n    throw error;\n  });\n}\n\n/**\n * Process the raw data and extract information\n * @param {Array} data Raw data array\n * @param {Function} dateParser Function to parse dates\n * @returns {Object} Processed data and metadata\n */\nfunction processData(data, dateParser) {\n  console.time('Data Processing');\n\n  // Parse dates and create a copy of data with additional fields\n  allData = data.map(function (d) {\n    return _objectSpread(_objectSpread({}, d), {}, {\n      parsedDate: dateParser(d['Date'])\n    });\n  });\n\n  // Extract unique values for filters\n  var uniqueCountries = _toConsumableArray(new Set(allData.map(function (item) {\n    return item.country;\n  }))).filter(function (country) {\n    return country;\n  }) // Filter out null/undefined\n  .sort(function (a, b) {\n    return a.localeCompare(b);\n  });\n  var uniqueCorruptionCategories = _toConsumableArray(new Set(allData.flatMap(function (item) {\n    return Array.isArray(item['Corruption Categories']) ? item['Corruption Categories'] : [];\n  }))).filter(function (category) {\n    return category;\n  }) // Filter out null/undefined\n  .sort(function (a, b) {\n    return a.localeCompare(b);\n  });\n  var uniqueHealthCategories = _toConsumableArray(new Set(allData.flatMap(function (item) {\n    return Array.isArray(item['Sector Categories']) ? item['Sector Categories'] : [];\n  }))).filter(function (category) {\n    return category;\n  }) // Filter out null/undefined\n  .sort(function (a, b) {\n    return a.localeCompare(b);\n  });\n\n  // Get min and max dates for date range filter\n  minDate = d3.min(allData, function (d) {\n    return d.parsedDate;\n  });\n  maxDate = d3.max(allData, function (d) {\n    return d.parsedDate;\n  });\n  console.timeEnd('Data Processing');\n  return {\n    allData: allData,\n    uniqueCountries: uniqueCountries,\n    uniqueCorruptionCategories: uniqueCorruptionCategories,\n    uniqueHealthCategories: uniqueHealthCategories,\n    minDate: minDate,\n    maxDate: maxDate\n  };\n}\n\n/**\n * Apply filters to the data based on user selection\n * @param {Object} filterCriteria Filter criteria object\n * @returns {Array} Filtered data array\n */\nfunction filterData(filterCriteria) {\n  console.time('Filtering Data');\n  var selectedCountries = filterCriteria.selectedCountries,\n    selectedCorruptionCategories = filterCriteria.selectedCorruptionCategories,\n    selectedHealthCategories = filterCriteria.selectedHealthCategories,\n    startDate = filterCriteria.startDate,\n    endDate = filterCriteria.endDate,\n    searchTerm = filterCriteria.searchTerm,\n    showArchived = filterCriteria.showArchived,\n    showCase = filterCriteria.showCase,\n    unreliableCase = filterCriteria.unreliableCase,\n    showCountryLevel = filterCriteria.showCountryLevel;\n  filteredData = allData.filter(function (d) {\n    // Check country match\n    var countryMatch = selectedCountries.size === 0 || selectedCountries.has(d.country);\n\n    // Check corruption category match\n    var corruptionCategoryMatch = selectedCorruptionCategories.size === 0 || Array.isArray(d['Corruption Categories']) && d['Corruption Categories'].some(function (category) {\n      return selectedCorruptionCategories.has(category);\n    });\n\n    // Check health category match\n    var healthCategoryMatch = selectedHealthCategories.size === 0 || Array.isArray(d['Sector Categories']) && d['Sector Categories'].some(function (category) {\n      return selectedHealthCategories.has(category);\n    });\n\n    // Check date match\n    var dateMatch = true;\n    if (startDate && endDate && d.parsedDate) {\n      dateMatch = d.parsedDate >= startDate && d.parsedDate <= endDate;\n    }\n\n    // Check title match\n    var titleMatch = true;\n    if (searchTerm) {\n      var title = d.Title.toLowerCase();\n      if (searchTerm.startsWith('\"') && searchTerm.endsWith('\"')) {\n        titleMatch = title.includes(searchTerm.slice(1, -1));\n      } else {\n        titleMatch = searchTerm.split(' ').every(function (word) {\n          return title.includes(word);\n        });\n      }\n    }\n\n    // Check special filter matches\n    var archivedMatch = !showArchived || !d.Archived;\n    var caseMatch = !showCase || d.c_n;\n    var unreliableMatch = !unreliableCase || !d.f_n;\n    var countryLevelMatch = !showCountryLevel || !d.country_level;\n\n    // Combine all filter conditions\n    return countryMatch && corruptionCategoryMatch && healthCategoryMatch && dateMatch && titleMatch && archivedMatch && unreliableMatch && caseMatch && countryLevelMatch;\n  });\n  console.timeEnd('Filtering Data');\n  return filteredData;\n}\n\n/**\n * Get data filtered by map bounds\n * @param {Object} bounds Map bounds object\n * @returns {Array} Visible data inside bounds\n */\nfunction getVisibleData(bounds) {\n  return filteredData.filter(function (d) {\n    return bounds.contains(L.latLng(d.lat, d.long));\n  });\n}\n\n/**\n * Get current filtered data\n * @returns {Array} Filtered data array\n */\nfunction getFilteredData() {\n  return filteredData;\n}\n\n/**\n * Get min and max dates from the dataset\n * @returns {Object} Object with minDate and maxDate \n */\nfunction getDateRange() {\n  return {\n    minDate: minDate,\n    maxDate: maxDate\n  };\n}\n\n/**\n * Export the data module\n */\nvar _default = exports.default = {\n  formatNumber: formatNumber,\n  loadData: loadData,\n  processData: processData,\n  filterData: filterData,\n  getVisibleData: getVisibleData,\n  getFilteredData: getFilteredData,\n  getDateRange: getDateRange\n};"},"sourceMaps":null,"error":null,"hash":"5460a50d2fbda140ccce6257f820c77e","cacheData":{"env":{}}}