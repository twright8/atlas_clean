{"id":"../node_modules/d3-contour/src/density.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-contour\\package.json","includedInParent":true,"mtime":1737120275532},{"name":"d3-array","loc":{"line":1,"column":35,"index":35},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-contour\\src\\density.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-array\\src\\index.js"},{"name":"./array","loc":{"line":2,"column":20,"index":68},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-contour\\src\\density.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-contour\\src\\array.js"},{"name":"./blur","loc":{"line":3,"column":27,"index":107},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-contour\\src\\density.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-contour\\src\\blur.js"},{"name":"./constant","loc":{"line":4,"column":21,"index":139},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-contour\\src\\density.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-contour\\src\\constant.js"},{"name":"./contours","loc":{"line":5,"column":21,"index":175},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-contour\\src\\density.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-contour\\src\\contours.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _d3Array = require(\"d3-array\");\nvar _array = require(\"./array\");\nvar _blur = require(\"./blur\");\nvar _constant = _interopRequireDefault(require(\"./constant\"));\nvar _contours = _interopRequireDefault(require(\"./contours\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction defaultX(d) {\n  return d[0];\n}\nfunction defaultY(d) {\n  return d[1];\n}\nfunction defaultWeight() {\n  return 1;\n}\nfunction _default() {\n  var x = defaultX,\n    y = defaultY,\n    weight = defaultWeight,\n    dx = 960,\n    dy = 500,\n    r = 20,\n    // blur radius\n    k = 2,\n    // log2(grid cell size)\n    o = r * 3,\n    // grid offset, to pad for blur\n    n = dx + o * 2 >> k,\n    // grid width\n    m = dy + o * 2 >> k,\n    // grid height\n    threshold = (0, _constant.default)(20);\n  function density(data) {\n    var values0 = new Float32Array(n * m),\n      values1 = new Float32Array(n * m);\n    data.forEach(function (d, i, data) {\n      var xi = +x(d, i, data) + o >> k,\n        yi = +y(d, i, data) + o >> k,\n        wi = +weight(d, i, data);\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        values0[xi + yi * n] += wi;\n      }\n    });\n\n    // TODO Optimize.\n    (0, _blur.blurX)({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    (0, _blur.blurY)({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    (0, _blur.blurX)({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    (0, _blur.blurY)({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    (0, _blur.blurX)({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    (0, _blur.blurY)({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    var tz = threshold(values0);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var stop = (0, _d3Array.max)(values0);\n      tz = (0, _d3Array.tickStep)(0, stop, tz);\n      tz = (0, _d3Array.range)(0, Math.floor(stop / tz) * tz, tz);\n      tz.shift();\n    }\n    return (0, _contours.default)().thresholds(tz).size([n, m])(values0).map(transform);\n  }\n  function transform(geometry) {\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n  function resize() {\n    o = r * 3;\n    n = dx + o * 2 >> k;\n    m = dy + o * 2 >> k;\n    return density;\n  }\n  density.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : (0, _constant.default)(+_), density) : x;\n  };\n  density.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : (0, _constant.default)(+_), density) : y;\n  };\n  density.weight = function (_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : (0, _constant.default)(+_), density) : weight;\n  };\n  density.size = function (_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.ceil(_[0]),\n      _1 = Math.ceil(_[1]);\n    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n  density.cellSize = function (_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n  density.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), density) : threshold;\n  };\n  density.bandwidth = function (_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n  return density;\n}"},"sourceMaps":null,"error":null,"hash":"d593c8ff7f3c2b6d642832b6ffc645cd","cacheData":{"env":{}}}