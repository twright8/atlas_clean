{"id":"../node_modules/d3-scale/src/quantile.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\package.json","includedInParent":true,"mtime":1737120275874},{"name":"d3-array","loc":{"line":1,"column":55,"index":55},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\quantile.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-array\\src\\index.js"},{"name":"./array","loc":{"line":2,"column":20,"index":88},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\quantile.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\array.js"},{"name":"./init","loc":{"line":3,"column":24,"index":124},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\quantile.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\init.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = quantile;\nvar _d3Array = require(\"d3-array\");\nvar _array = require(\"./array\");\nvar _init = require(\"./init\");\nfunction quantile() {\n  var domain = [],\n    range = [],\n    thresholds = [],\n    unknown;\n  function rescale() {\n    var i = 0,\n      n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = (0, _d3Array.quantile)(domain, i / n);\n    return scale;\n  }\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : range[(0, _d3Array.bisect)(thresholds, x)];\n  }\n  scale.invertExtent = function (y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];\n  };\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(_d3Array.ascending);\n    return rescale();\n  };\n  scale.range = function (_) {\n    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();\n  };\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n  scale.quantiles = function () {\n    return thresholds.slice();\n  };\n  scale.copy = function () {\n    return quantile().domain(domain).range(range).unknown(unknown);\n  };\n  return _init.initRange.apply(scale, arguments);\n}"},"sourceMaps":null,"error":null,"hash":"d0e54a9c8cb580bd71265149bdce15cd","cacheData":{"env":{}}}