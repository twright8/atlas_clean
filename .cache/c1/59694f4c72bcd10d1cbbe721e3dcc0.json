{"id":"modules/dashboardStats.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"d3","loc":{"line":5,"column":20,"index":152},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboardStats.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.updateSummaryStats = updateSummaryStats;\nvar d3 = _interopRequireWildcard(require(\"d3\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } /**\r\n * Enhanced module for dashboard statistics functionality\r\n * Provides detailed statistics and metrics for the dashboard\r\n */\n/**\r\n * Update the summary statistics with data\r\n * @param {Array} data Filtered data array\r\n * @param {Object} dateRange Object with minDate and maxDate\r\n */\nfunction updateSummaryStats(data, dateRange) {\n  // Calculate summary statistics\n  var totalArticles = data.length;\n\n  // Count unique countries\n  var uniqueCountries = new Set();\n  data.forEach(function (item) {\n    if (item.country && item.country.trim()) {\n      uniqueCountries.add(item.country);\n    }\n  });\n\n  // Count unique categories\n  var uniqueCategories = new Set();\n  data.forEach(function (item) {\n    if (Array.isArray(item['Corruption Categories'])) {\n      item['Corruption Categories'].forEach(function (category) {\n        if (category && category.trim()) {\n          uniqueCategories.add(category);\n        }\n      });\n    }\n  });\n\n  // Format date range\n  var timePeriodText = '-';\n  var timePeriodDisplayText = '-';\n  if (dateRange && dateRange.minDate && dateRange.maxDate) {\n    var formatDate = d3.timeFormat('%b %Y');\n    var formatMonthYear = d3.timeFormat('%B %Y');\n    timePeriodText = \"\".concat(formatDate(dateRange.minDate), \" - \").concat(formatDate(dateRange.maxDate));\n    timePeriodDisplayText = \"\".concat(formatMonthYear(dateRange.minDate), \" - \").concat(formatMonthYear(dateRange.maxDate));\n  }\n\n  // Update DOM elements for stats\n  document.getElementById('total-articles').textContent = totalArticles.toLocaleString();\n  document.getElementById('total-countries').textContent = uniqueCountries.size.toLocaleString();\n  document.getElementById('total-categories').textContent = uniqueCategories.size.toLocaleString();\n  document.getElementById('time-period').textContent = timePeriodText;\n\n  // Update the date range indicator in the card header if it exists\n  var timeDisplayElement = document.getElementById('time-period-display');\n  if (timeDisplayElement) {\n    timeDisplayElement.textContent = timePeriodDisplayText;\n  }\n\n  // Calculate and update additional metrics\n  updateTrendMetrics(data);\n}\n\n/**\r\n * Update trend metrics with data for key insights\r\n * @param {Array} data Filtered data array\r\n */\nfunction updateTrendMetrics(data) {\n  var metricsContainer = document.getElementById('key-metrics');\n  if (!metricsContainer) return;\n\n  // Calculate key metrics\n\n  // 1. Articles per month ratio\n  var monthsCount = getMonthsCount(data);\n  var articlesPerMonth = monthsCount > 0 ? Math.round(data.length / monthsCount * 10) / 10 : 0;\n\n  // 2. Country coverage percentage (compared to all possible countries ~195)\n  var uniqueCountries = new Set();\n  data.forEach(function (item) {\n    if (item.country && item.country.trim()) {\n      uniqueCountries.add(item.country);\n    }\n  });\n  var countryCoverage = Math.round(uniqueCountries.size / 195 * 100);\n\n  // 3. Category distribution - dominant category percentage\n  var categoryData = getCategoryDistribution(data);\n  var topCategoryPercentage = 0;\n  var topCategoryName = \"N/A\";\n  if (categoryData.length > 0) {\n    topCategoryName = categoryData[0].category;\n    topCategoryPercentage = Math.round(categoryData[0].count / data.length * 100);\n  }\n\n  // Create metrics HTML\n  var metricsHTML = \"\\n        <div class=\\\"key-metric\\\">\\n            <span class=\\\"key-metric-value\\\">\".concat(articlesPerMonth, \"</span>\\n            <span class=\\\"key-metric-label\\\">Articles/Month</span>\\n        </div>\\n        <div class=\\\"key-metric\\\">\\n            <span class=\\\"key-metric-value\\\">\").concat(countryCoverage, \"%</span>\\n            <span class=\\\"key-metric-label\\\">Country Coverage</span>\\n        </div>\\n        <div class=\\\"key-metric\\\">\\n            <span class=\\\"key-metric-value\\\">\").concat(topCategoryPercentage, \"%</span>\\n            <span class=\\\"key-metric-label\\\">\").concat(topCategoryName, \"</span>\\n        </div>\\n        <div class=\\\"key-metric\\\">\\n            <span class=\\\"key-metric-value\\\">\").concat(data.length.toLocaleString(), \"</span>\\n            <span class=\\\"key-metric-label\\\">Total Articles</span>\\n        </div>\\n    \");\n  metricsContainer.innerHTML = metricsHTML;\n\n  // Update trend indicators with insightful analysis\n  updateTrendIndicators(data);\n}\n\n/**\r\n * Update trend indicators with insightful analysis\r\n * @param {Array} data Filtered data array\r\n */\nfunction updateTrendIndicators(data) {\n  var trendContainer = document.getElementById('trend-indicators');\n  if (!trendContainer) return;\n\n  // Initialize trend indicators\n  var trendsHTML = '';\n\n  // If not enough data for trends, show appropriate message\n  if (data.length < 10) {\n    trendsHTML = \"\\n            <div class=\\\"trend-indicator\\\">\\n                <div class=\\\"trend-title\\\">\\n                    <i class=\\\"fa fa-info-circle\\\"></i>\\n                    <span>Dataset Analysis</span>\\n                </div>\\n                <div class=\\\"trend-value trend-neutral\\\">\\n                    <i class=\\\"fa fa-exclamation-circle\\\"></i>\\n                    <span>Need more data for detailed trends</span>\\n                </div>\\n            </div>\\n        \";\n    trendContainer.innerHTML = trendsHTML;\n    return;\n  }\n\n  // 1. Time trend analysis - Are articles increasing or decreasing over time?\n  var timeTrend = analyzeTimeTrend(data);\n\n  // 2. Geographic focus - Is there a concentration in specific regions?\n  var geoFocus = analyzeGeographicFocus(data);\n\n  // 3. Category trend - Which integrity issues are gaining more attention?\n  var categoryTrend = analyzeCategoryTrend(data);\n  trendsHTML = \"\\n        <div class=\\\"trend-indicator\\\">\\n            <div class=\\\"trend-title\\\">\\n                <i class=\\\"fa fa-calendar\\\"></i>\\n                <span>Time Pattern</span>\\n            </div>\\n            <div class=\\\"trend-value \".concat(timeTrend.direction, \"\\\">\\n                <i class=\\\"fa fa-\").concat(getTrendIcon(timeTrend.direction), \"\\\"></i>\\n                <span>\").concat(timeTrend.label, \"</span>\\n            </div>\\n        </div>\\n        <div class=\\\"trend-indicator\\\">\\n            <div class=\\\"trend-title\\\">\\n                <i class=\\\"fa fa-globe\\\"></i>\\n                <span>Geographic Focus</span>\\n            </div>\\n            <div class=\\\"trend-value\\\">\\n                <span>\").concat(geoFocus.label, \"</span>\\n            </div>\\n        </div>\\n        <div class=\\\"trend-indicator\\\">\\n            <div class=\\\"trend-title\\\">\\n                <i class=\\\"fa fa-tag\\\"></i>\\n                <span>Rising Issue</span>\\n            </div>\\n            <div class=\\\"trend-value\\\">\\n                <span>\").concat(categoryTrend.label, \"</span>\\n            </div>\\n        </div>\\n    \");\n  trendContainer.innerHTML = trendsHTML;\n\n  // Update recent articles\n  updateRecentArticles(data);\n}\n\n/**\r\n * Update recent articles list\r\n * @param {Array} data Filtered data array\r\n */\nfunction updateRecentArticles(data) {\n  var recentArticlesList = document.getElementById('recent-articles-list');\n  if (!recentArticlesList) return;\n  if (data.length === 0) {\n    recentArticlesList.innerHTML = '<p class=\"no-data-message\">No articles available</p>';\n    return;\n  }\n\n  // Sort by date (newest first)\n  var sortedData = _toConsumableArray(data).sort(function (a, b) {\n    if (!a.parsedDate || !b.parsedDate) return 0;\n    return b.parsedDate - a.parsedDate;\n  });\n\n  // Take the 5 most recent\n  var recentArticles = sortedData.slice(0, 5);\n\n  // Create HTML for article list\n  var articlesHTML = recentArticles.map(function (article) {\n    var title = article.Title || 'Untitled';\n    var country = article.country || 'Unknown location';\n\n    // Format date\n    var date = 'Unknown date';\n    if (article.parsedDate) {\n      var options = {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      };\n      date = article.parsedDate.toLocaleDateString(undefined, options);\n    } else if (article.Date) {\n      date = article.Date;\n    }\n\n    // Get categories\n    var categories = 'No categories';\n    if (Array.isArray(article['Corruption Categories']) && article['Corruption Categories'].length > 0) {\n      categories = article['Corruption Categories'].slice(0, 2).join(', ');\n      if (article['Corruption Categories'].length > 2) {\n        categories += '...';\n      }\n    }\n    return \"\\n            <div class=\\\"article-item\\\" data-url=\\\"\".concat(article.url || '#', \"\\\" onclick=\\\"window.open('\").concat(article.url || '#', \"', '_blank')\\\">\\n                <div class=\\\"article-title\\\">\").concat(title, \"</div>\\n                <div class=\\\"article-meta\\\">\\n                    <span><i class=\\\"fa fa-map-marker\\\"></i> \").concat(country, \"</span>\\n                    <span><i class=\\\"fa fa-calendar\\\"></i> \").concat(date, \"</span>\\n                </div>\\n            </div>\\n        \");\n  }).join('');\n  recentArticlesList.innerHTML = articlesHTML;\n}\n\n/**\r\n * Get the number of months represented in the data\r\n * @param {Array} data Filtered data array\r\n * @returns {Number} Number of months\r\n */\nfunction getMonthsCount(data) {\n  if (data.length === 0) return 0;\n\n  // Get all dates\n  var dates = data.map(function (item) {\n    return item.parsedDate;\n  }).filter(function (date) {\n    return date !== null && date !== undefined;\n  });\n  if (dates.length === 0) return 0;\n\n  // Get min and max dates\n  var minDate = new Date(Math.min.apply(Math, _toConsumableArray(dates.map(function (d) {\n    return d.getTime();\n  }))));\n  var maxDate = new Date(Math.max.apply(Math, _toConsumableArray(dates.map(function (d) {\n    return d.getTime();\n  }))));\n\n  // Calculate months between min and max dates\n  var yearDiff = maxDate.getFullYear() - minDate.getFullYear();\n  var monthDiff = maxDate.getMonth() - minDate.getMonth();\n  var totalMonths = yearDiff * 12 + monthDiff + 1; // +1 to include both start and end months\n\n  return totalMonths;\n}\n\n/**\r\n * Get the distribution of categories in the data\r\n * @param {Array} data Filtered data array\r\n * @returns {Array} Array of category objects with counts, sorted by count\r\n */\nfunction getCategoryDistribution(data) {\n  var categoryCounts = {};\n  data.forEach(function (item) {\n    if (Array.isArray(item['Corruption Categories'])) {\n      item['Corruption Categories'].forEach(function (category) {\n        if (category && category.trim()) {\n          categoryCounts[category] = (categoryCounts[category] || 0) + 1;\n        }\n      });\n    }\n  });\n\n  // Convert to array and sort\n  var categoryData = Object.entries(categoryCounts).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      category = _ref2[0],\n      count = _ref2[1];\n    return {\n      category: category,\n      count: count\n    };\n  }).sort(function (a, b) {\n    return b.count - a.count;\n  });\n  return categoryData;\n}\n\n/**\r\n * Analyze the time trend in the data\r\n * @param {Array} data Filtered data array\r\n * @returns {Object} Trend object with direction and label\r\n */\nfunction analyzeTimeTrend(data) {\n  if (data.length < 10) {\n    return {\n      direction: 'trend-neutral',\n      label: 'Insufficient data'\n    };\n  }\n\n  // Group by month\n  var monthGroups = d3.nest().key(function (d) {\n    var date = d.parsedDate;\n    return date ? d3.timeFormat('%Y-%m')(date) : 'Unknown';\n  }).rollup(function (v) {\n    return v.length;\n  }).entries(data).filter(function (d) {\n    return d.key !== 'Unknown';\n  }).sort(function (a, b) {\n    return d3.ascending(a.key, b.key);\n  });\n  if (monthGroups.length < 3) {\n    return {\n      direction: 'trend-neutral',\n      label: 'Insufficient time span'\n    };\n  }\n\n  // Compare first third vs last third\n  var thirdSize = Math.floor(monthGroups.length / 3);\n  var firstThird = monthGroups.slice(0, thirdSize);\n  var lastThird = monthGroups.slice(-thirdSize);\n  var firstThirdAvg = d3.mean(firstThird, function (d) {\n    return d.value;\n  });\n  var lastThirdAvg = d3.mean(lastThird, function (d) {\n    return d.value;\n  });\n  var percentChange = (lastThirdAvg - firstThirdAvg) / firstThirdAvg * 100;\n  if (percentChange > 20) {\n    return {\n      direction: 'trend-up',\n      label: 'Increasing coverage'\n    };\n  } else if (percentChange < -20) {\n    return {\n      direction: 'trend-down',\n      label: 'Decreasing coverage'\n    };\n  } else {\n    return {\n      direction: 'trend-neutral',\n      label: 'Stable coverage'\n    };\n  }\n}\n\n/**\r\n * Analyze the geographic focus in the data\r\n * @param {Array} data Filtered data array\r\n * @returns {Object} Focus object with label\r\n */\nfunction analyzeGeographicFocus(data) {\n  // Count by country\n  var countryData = [];\n  var countryCounts = {};\n  data.forEach(function (item) {\n    if (item.country && item.country.trim()) {\n      countryCounts[item.country] = (countryCounts[item.country] || 0) + 1;\n    }\n  });\n\n  // Convert to array\n  Object.entries(countryCounts).forEach(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      country = _ref4[0],\n      count = _ref4[1];\n    countryData.push({\n      country: country,\n      count: count\n    });\n  });\n\n  // Sort by count\n  countryData.sort(function (a, b) {\n    return b.count - a.count;\n  });\n\n  // Calculate concentration metrics\n  var totalCountries = countryData.length;\n  if (totalCountries === 0) return {\n    label: 'No geographic data'\n  };\n  var top3Count = countryData.slice(0, 3).reduce(function (sum, item) {\n    return sum + item.count;\n  }, 0);\n  var top3Percentage = Math.round(top3Count / data.length * 100);\n  if (top3Percentage > 60) {\n    return {\n      label: \"High focus on top 3 (\".concat(top3Percentage, \"%)\")\n    };\n  } else if (top3Percentage > 40) {\n    return {\n      label: \"Moderate regional focus (\".concat(top3Percentage, \"%)\")\n    };\n  } else {\n    return {\n      label: \"Broad global coverage\"\n    };\n  }\n}\n\n/**\r\n * Analyze the category trends in the data\r\n * @param {Array} data Filtered data array\r\n * @returns {Object} Trend object with label\r\n */\nfunction analyzeCategoryTrend(data) {\n  if (data.length < 10) {\n    return {\n      label: 'Insufficient data'\n    };\n  }\n\n  // Sort by date\n  var sortedData = _toConsumableArray(data).sort(function (a, b) {\n    if (!a.parsedDate || !b.parsedDate) return 0;\n    return a.parsedDate - b.parsedDate;\n  });\n\n  // Split into two halves by time\n  var halfPoint = Math.floor(sortedData.length / 2);\n  var firstHalf = sortedData.slice(0, halfPoint);\n  var secondHalf = sortedData.slice(halfPoint);\n\n  // Get category counts for each half\n  var firstHalfCounts = {};\n  var secondHalfCounts = {};\n  firstHalf.forEach(function (item) {\n    if (Array.isArray(item['Corruption Categories'])) {\n      item['Corruption Categories'].forEach(function (category) {\n        if (category && category.trim()) {\n          firstHalfCounts[category] = (firstHalfCounts[category] || 0) + 1;\n        }\n      });\n    }\n  });\n  secondHalf.forEach(function (item) {\n    if (Array.isArray(item['Corruption Categories'])) {\n      item['Corruption Categories'].forEach(function (category) {\n        if (category && category.trim()) {\n          secondHalfCounts[category] = (secondHalfCounts[category] || 0) + 1;\n        }\n      });\n    }\n  });\n\n  // Find categories with the most growth\n  var maxGrowth = -Infinity;\n  var growingCategory = null;\n  Object.keys(secondHalfCounts).forEach(function (category) {\n    var firstCount = firstHalfCounts[category] || 0;\n    var secondCount = secondHalfCounts[category];\n\n    // Only consider categories with at least 3 mentions\n    if (secondCount >= 3) {\n      var growthRate = firstCount > 0 ? (secondCount - firstCount) / firstCount : Infinity;\n      if (growthRate > maxGrowth) {\n        maxGrowth = growthRate;\n        growingCategory = category;\n      }\n    }\n  });\n  if (growingCategory) {\n    // Truncate long category names\n    var displayCategory = growingCategory.length > 18 ? growingCategory.slice(0, 15) + '...' : growingCategory;\n    return {\n      label: displayCategory\n    };\n  } else {\n    return {\n      label: 'No clear trend'\n    };\n  }\n}\n\n/**\r\n * Get icon name based on trend direction\r\n * @param {String} direction Trend direction class\r\n * @returns {String} Icon name\r\n */\nfunction getTrendIcon(direction) {\n  switch (direction) {\n    case 'trend-up':\n      return 'arrow-up';\n    case 'trend-down':\n      return 'arrow-down';\n    default:\n      return 'minus';\n  }\n}\nvar _default = exports.default = {\n  updateSummaryStats: updateSummaryStats\n};"},"sourceMaps":null,"error":null,"hash":"7a5967b428d3f07752d90c147ee115f2","cacheData":{"env":{}}}