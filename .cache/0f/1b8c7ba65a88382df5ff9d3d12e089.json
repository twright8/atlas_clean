{"id":"../node_modules/d3-scale/src/threshold.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\package.json","includedInParent":true,"mtime":1737120275874},{"name":"d3-array","loc":{"line":1,"column":21,"index":21},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\threshold.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-array\\src\\index.js"},{"name":"./array","loc":{"line":2,"column":20,"index":54},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\threshold.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\array.js"},{"name":"./init","loc":{"line":3,"column":24,"index":90},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\threshold.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\init.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = threshold;\nvar _d3Array = require(\"d3-array\");\nvar _array = require(\"./array\");\nvar _init = require(\"./init\");\nfunction threshold() {\n  var domain = [0.5],\n    range = [0, 1],\n    unknown,\n    n = 1;\n  function scale(x) {\n    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;\n  }\n  scale.domain = function (_) {\n    return arguments.length ? (domain = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n  scale.range = function (_) {\n    return arguments.length ? (range = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n  scale.invertExtent = function (y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n  scale.copy = function () {\n    return threshold().domain(domain).range(range).unknown(unknown);\n  };\n  return _init.initRange.apply(scale, arguments);\n}"},"sourceMaps":null,"error":null,"hash":"3da20982188bef066d9d4bd01882edd7","cacheData":{"env":{}}}