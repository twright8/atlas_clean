{"id":"../node_modules/d3-geo/src/projection/index.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\package.json","includedInParent":true,"mtime":1737120275660},{"name":"../clip/antimeridian.js","loc":{"line":1,"column":29,"index":29},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\index.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\clip\\antimeridian.js"},{"name":"../clip/circle.js","loc":{"line":2,"column":23,"index":80},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\index.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\clip\\circle.js"},{"name":"../clip/rectangle.js","loc":{"line":3,"column":26,"index":128},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\index.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\clip\\rectangle.js"},{"name":"../compose.js","loc":{"line":4,"column":20,"index":173},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\index.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\compose.js"},{"name":"../identity.js","loc":{"line":5,"column":21,"index":212},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\index.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\identity.js"},{"name":"../math.js","loc":{"line":6,"column":47,"index":278},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\index.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\math.js"},{"name":"../rotation.js","loc":{"line":7,"column":28,"index":321},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\index.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\rotation.js"},{"name":"../transform.js","loc":{"line":8,"column":26,"index":366},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\index.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\transform.js"},{"name":"./fit.js","loc":{"line":9,"column":54,"index":440},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\index.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\fit.js"},{"name":"./resample.js","loc":{"line":10,"column":21,"index":474},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\index.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\resample.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = projection;\nexports.projectionMutator = projectionMutator;\nvar _antimeridian = _interopRequireDefault(require(\"../clip/antimeridian.js\"));\nvar _circle = _interopRequireDefault(require(\"../clip/circle.js\"));\nvar _rectangle = _interopRequireDefault(require(\"../clip/rectangle.js\"));\nvar _compose = _interopRequireDefault(require(\"../compose.js\"));\nvar _identity = _interopRequireDefault(require(\"../identity.js\"));\nvar _math = require(\"../math.js\");\nvar _rotation = require(\"../rotation.js\");\nvar _transform = require(\"../transform.js\");\nvar _fit = require(\"./fit.js\");\nvar _resample = _interopRequireDefault(require(\"./resample.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar transformRadians = (0, _transform.transformer)({\n  point: function (x, y) {\n    this.stream.point(x * _math.radians, y * _math.radians);\n  }\n});\nfunction transformRotate(rotate) {\n  return (0, _transform.transformer)({\n    point: function (x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\nfunction scaleTranslate(k, dx, dy) {\n  function transform(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function (x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n  return transform;\n}\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = (0, _math.cos)(alpha),\n    sinAlpha = (0, _math.sin)(alpha),\n    a = cosAlpha * k,\n    b = sinAlpha * k,\n    ai = cosAlpha / k,\n    bi = sinAlpha / k,\n    ci = (sinAlpha * dy - cosAlpha * dx) / k,\n    fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function (x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n  return transform;\n}\nfunction projection(project) {\n  return projectionMutator(function () {\n    return project;\n  })();\n}\nfunction projectionMutator(projectAt) {\n  var project,\n    k = 150,\n    // scale\n    x = 480,\n    y = 250,\n    // translate\n    lambda = 0,\n    phi = 0,\n    // center\n    deltaLambda = 0,\n    deltaPhi = 0,\n    deltaGamma = 0,\n    rotate,\n    // pre-rotate\n    alpha = 0,\n    // post-rotate\n    theta = null,\n    preclip = _antimeridian.default,\n    // pre-clip angle\n    x0 = null,\n    y0,\n    x1,\n    y1,\n    postclip = _identity.default,\n    // post-clip extent\n    delta2 = 0.5,\n    // precision\n    projectResample,\n    projectTransform,\n    projectRotateTransform,\n    cache,\n    cacheStream;\n  function projection(point) {\n    return projectRotateTransform(point[0] * _math.radians, point[1] * _math.radians);\n  }\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * _math.degrees, point[1] * _math.degrees];\n  }\n  projection.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n  projection.preclip = function (_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n  projection.postclip = function (_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n  projection.clipAngle = function (_) {\n    return arguments.length ? (preclip = +_ ? (0, _circle.default)(theta = _ * _math.radians) : (theta = null, _antimeridian.default), reset()) : theta * _math.degrees;\n  };\n  projection.clipExtent = function (_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n  projection.scale = function (_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n  projection.translate = function (_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n  projection.center = function (_) {\n    return arguments.length ? (lambda = _[0] % 360 * _math.radians, phi = _[1] % 360 * _math.radians, recenter()) : [lambda * _math.degrees, phi * _math.degrees];\n  };\n  projection.rotate = function (_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * _math.radians, deltaPhi = _[1] % 360 * _math.radians, deltaGamma = _.length > 2 ? _[2] % 360 * _math.radians : 0, recenter()) : [deltaLambda * _math.degrees, deltaPhi * _math.degrees, deltaGamma * _math.degrees];\n  };\n  projection.angle = function (_) {\n    return arguments.length ? (alpha = _ % 360 * _math.radians, recenter()) : alpha * _math.degrees;\n  };\n  projection.precision = function (_) {\n    return arguments.length ? (projectResample = (0, _resample.default)(projectTransform, delta2 = _ * _), reset()) : (0, _math.sqrt)(delta2);\n  };\n  projection.fitExtent = function (extent, object) {\n    return (0, _fit.fitExtent)(projection, extent, object);\n  };\n  projection.fitSize = function (size, object) {\n    return (0, _fit.fitSize)(projection, size, object);\n  };\n  projection.fitWidth = function (width, object) {\n    return (0, _fit.fitWidth)(projection, width, object);\n  };\n  projection.fitHeight = function (height, object) {\n    return (0, _fit.fitHeight)(projection, height, object);\n  };\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n      transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = (0, _rotation.rotateRadians)(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = (0, _compose.default)(project, transform);\n    projectRotateTransform = (0, _compose.default)(rotate, projectTransform);\n    projectResample = (0, _resample.default)(projectTransform, delta2);\n    return reset();\n  }\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n  return function () {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}"},"sourceMaps":null,"error":null,"hash":"9f1a8a376b68ef81dc2b5d22453d905c","cacheData":{"env":{}}}