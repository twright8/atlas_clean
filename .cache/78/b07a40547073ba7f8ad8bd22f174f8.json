{"id":"../node_modules/d3-geo/src/projection/conicEqualArea.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\package.json","includedInParent":true,"mtime":1737120275660},{"name":"../math.js","loc":{"line":1,"column":62,"index":62},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conicEqualArea.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\math.js"},{"name":"./conic.js","loc":{"line":2,"column":30,"index":107},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conicEqualArea.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conic.js"},{"name":"./cylindricalEqualArea.js","loc":{"line":3,"column":38,"index":160},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conicEqualArea.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\cylindricalEqualArea.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.conicEqualAreaRaw = conicEqualAreaRaw;\nexports.default = _default;\nvar _math = require(\"../math.js\");\nvar _conic = require(\"./conic.js\");\nvar _cylindricalEqualArea = require(\"./cylindricalEqualArea.js\");\nfunction conicEqualAreaRaw(y0, y1) {\n  var sy0 = (0, _math.sin)(y0),\n    n = (sy0 + (0, _math.sin)(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if ((0, _math.abs)(n) < _math.epsilon) return (0, _cylindricalEqualArea.cylindricalEqualAreaRaw)(y0);\n  var c = 1 + sy0 * (2 * n - sy0),\n    r0 = (0, _math.sqrt)(c) / n;\n  function project(x, y) {\n    var r = (0, _math.sqrt)(c - 2 * n * (0, _math.sin)(y)) / n;\n    return [r * (0, _math.sin)(x *= n), r0 - r * (0, _math.cos)(x)];\n  }\n  project.invert = function (x, y) {\n    var r0y = r0 - y;\n    return [(0, _math.atan2)(x, (0, _math.abs)(r0y)) / n * (0, _math.sign)(r0y), (0, _math.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n  return project;\n}\nfunction _default() {\n  return (0, _conic.conicProjection)(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);\n}"},"sourceMaps":null,"error":null,"hash":"343347c0e0d86ec4d4bc3607dd301f1e","cacheData":{"env":{}}}