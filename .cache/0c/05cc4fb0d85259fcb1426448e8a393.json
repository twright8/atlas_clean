{"id":"../node_modules/d3-geo/src/projection/conicConformal.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\package.json","includedInParent":true,"mtime":1737120275660},{"name":"../math.js","loc":{"line":1,"column":85,"index":85},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conicConformal.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\math.js"},{"name":"./conic.js","loc":{"line":2,"column":30,"index":130},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conicConformal.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conic.js"},{"name":"./mercator.js","loc":{"line":3,"column":26,"index":171},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\conicConformal.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\mercator.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.conicConformalRaw = conicConformalRaw;\nexports.default = _default;\nvar _math = require(\"../math.js\");\nvar _conic = require(\"./conic.js\");\nvar _mercator = require(\"./mercator.js\");\nfunction tany(y) {\n  return (0, _math.tan)((_math.halfPi + y) / 2);\n}\nfunction conicConformalRaw(y0, y1) {\n  var cy0 = (0, _math.cos)(y0),\n    n = y0 === y1 ? (0, _math.sin)(y0) : (0, _math.log)(cy0 / (0, _math.cos)(y1)) / (0, _math.log)(tany(y1) / tany(y0)),\n    f = cy0 * (0, _math.pow)(tany(y0), n) / n;\n  if (!n) return _mercator.mercatorRaw;\n  function project(x, y) {\n    if (f > 0) {\n      if (y < -_math.halfPi + _math.epsilon) y = -_math.halfPi + _math.epsilon;\n    } else {\n      if (y > _math.halfPi - _math.epsilon) y = _math.halfPi - _math.epsilon;\n    }\n    var r = f / (0, _math.pow)(tany(y), n);\n    return [r * (0, _math.sin)(n * x), f - r * (0, _math.cos)(n * x)];\n  }\n  project.invert = function (x, y) {\n    var fy = f - y,\n      r = (0, _math.sign)(n) * (0, _math.sqrt)(x * x + fy * fy);\n    return [(0, _math.atan2)(x, (0, _math.abs)(fy)) / n * (0, _math.sign)(fy), 2 * (0, _math.atan)((0, _math.pow)(f / r, 1 / n)) - _math.halfPi];\n  };\n  return project;\n}\nfunction _default() {\n  return (0, _conic.conicProjection)(conicConformalRaw).scale(109.5).parallels([30, 30]);\n}"},"sourceMaps":null,"error":null,"hash":"756fcb7c3d44dd8eafb4dea63e294836","cacheData":{"env":{}}}