{"id":"../node_modules/d3-force/src/link.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-force\\package.json","includedInParent":true,"mtime":1737120275600},{"name":"./constant","loc":{"line":1,"column":21,"index":21},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-force\\src\\link.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-force\\src\\constant.js"},{"name":"./jiggle","loc":{"line":2,"column":19,"index":55},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-force\\src\\link.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-force\\src\\jiggle.js"},{"name":"d3-collection","loc":{"line":3,"column":18,"index":86},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-force\\src\\link.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-collection\\src\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _constant = _interopRequireDefault(require(\"./constant\"));\nvar _jiggle = _interopRequireDefault(require(\"./jiggle\"));\nvar _d3Collection = require(\"d3-collection\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction index(d) {\n  return d.index;\n}\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"missing: \" + nodeId);\n  return node;\n}\nfunction _default(links) {\n  var id = index,\n    strength = defaultStrength,\n    strengths,\n    distance = (0, _constant.default)(30),\n    distances,\n    nodes,\n    count,\n    bias,\n    iterations = 1;\n  if (links == null) links = [];\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || (0, _jiggle.default)();\n        y = target.y + target.vy - source.y - source.vy || (0, _jiggle.default)();\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n  function initialize() {\n    if (!nodes) return;\n    var i,\n      n = nodes.length,\n      m = links.length,\n      nodeById = (0, _d3Collection.map)(nodes, id),\n      link;\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n  function initializeStrength() {\n    if (!nodes) return;\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n  function initializeDistance() {\n    if (!nodes) return;\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n  force.links = function (_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n  force.id = function (_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, _constant.default)(+_), initializeStrength(), force) : strength;\n  };\n  force.distance = function (_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : (0, _constant.default)(+_), initializeDistance(), force) : distance;\n  };\n  return force;\n}"},"sourceMaps":null,"error":null,"hash":"2dc88bee55114c2698fbcf89efc97ed2","cacheData":{"env":{}}}