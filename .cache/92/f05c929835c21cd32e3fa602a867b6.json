{"id":"../node_modules/d3-scale/src/symlog.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\package.json","includedInParent":true,"mtime":1737120275874},{"name":"./linear","loc":{"line":1,"column":24,"index":24},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\symlog.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\linear.js"},{"name":"./continuous","loc":{"line":2,"column":32,"index":69},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\symlog.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\continuous.js"},{"name":"./init","loc":{"line":3,"column":24,"index":110},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\symlog.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\init.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = symlog;\nexports.symlogish = symlogish;\nvar _linear = require(\"./linear\");\nvar _continuous = require(\"./continuous\");\nvar _init = require(\"./init\");\nfunction transformSymlog(c) {\n  return function (x) {\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\n  };\n}\nfunction transformSymexp(c) {\n  return function (x) {\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n  };\n}\nfunction symlogish(transform) {\n  var c = 1,\n    scale = transform(transformSymlog(c), transformSymexp(c));\n  scale.constant = function (_) {\n    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n  };\n  return (0, _linear.linearish)(scale);\n}\nfunction symlog() {\n  var scale = symlogish((0, _continuous.transformer)());\n  scale.copy = function () {\n    return (0, _continuous.copy)(scale, symlog()).constant(scale.constant());\n  };\n  return _init.initRange.apply(scale, arguments);\n}"},"sourceMaps":null,"error":null,"hash":"356a39c0d25008eca657bb01eea38f9e","cacheData":{"env":{}}}