{"id":"../node_modules/d3-geo/src/projection/fit.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\package.json","includedInParent":true,"mtime":1737120275660},{"name":"../stream.js","loc":{"line":1,"column":35,"index":35},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\fit.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\stream.js"},{"name":"../path/bounds.js","loc":{"line":2,"column":25,"index":77},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\projection\\fit.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\src\\path\\bounds.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fitExtent = fitExtent;\nexports.fitHeight = fitHeight;\nexports.fitSize = fitSize;\nexports.fitWidth = fitWidth;\nvar _stream = _interopRequireDefault(require(\"../stream.js\"));\nvar _bounds = _interopRequireDefault(require(\"../path/bounds.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  (0, _stream.default)(object, projection.stream(_bounds.default));\n  fitBounds(_bounds.default.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\nfunction fitExtent(projection, extent, object) {\n  return fit(projection, function (b) {\n    var w = extent[1][0] - extent[0][0],\n      h = extent[1][1] - extent[0][1],\n      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\nfunction fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\nfunction fitWidth(projection, width, object) {\n  return fit(projection, function (b) {\n    var w = +width,\n      k = w / (b[1][0] - b[0][0]),\n      x = (w - k * (b[1][0] + b[0][0])) / 2,\n      y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\nfunction fitHeight(projection, height, object) {\n  return fit(projection, function (b) {\n    var h = +height,\n      k = h / (b[1][1] - b[0][1]),\n      x = -k * b[0][0],\n      y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}"},"sourceMaps":null,"error":null,"hash":"1bc77b8a47101815fa6f057bb977c649","cacheData":{"env":{}}}