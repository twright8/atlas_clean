{"id":"modules/dashboard.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"./dashboardLayout","loc":{"line":4,"column":33,"index":108},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboard.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboardLayout.js"},{"name":"./dashboardCharts","loc":{"line":5,"column":33,"index":162},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboard.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboardCharts.js"},{"name":"./dashboardStats","loc":{"line":6,"column":32,"index":215},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboard.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboardStats.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.handleDashboardResize = handleDashboardResize;\nexports.initializeDashboard = initializeDashboard;\nexports.updateDashboard = updateDashboard;\nvar dashboardLayout = _interopRequireWildcard(require(\"./dashboardLayout\"));\nvar dashboardCharts = _interopRequireWildcard(require(\"./dashboardCharts\"));\nvar dashboardStats = _interopRequireWildcard(require(\"./dashboardStats\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n/**\n * Main dashboard module that orchestrates dashboard functionality\n */\n\n// Dashboard state\nvar dashboardData = [];\nvar timeSeriesChart;\nvar categoryChart;\nvar topCountriesChart;\nvar dateRange;\n\n/**\n * Initialize the dashboard visualizations\n * @param {HTMLElement} container The container element for the dashboard\n */\nfunction initializeDashboard(container) {\n  console.time('Dashboard Initialization');\n\n  // Create dashboard layout\n  dashboardLayout.createDashboardLayout(container);\n\n  // Initialize charts with empty data\n  timeSeriesChart = dashboardCharts.initializeTimeSeriesChart();\n  categoryChart = dashboardCharts.initializeCategoryChart();\n  topCountriesChart = dashboardCharts.initializeTopCountriesChart();\n  console.timeEnd('Dashboard Initialization');\n}\n\n/**\n * Update the dashboard with filtered data\n * @param {Array} data Filtered data array\n * @param {Object} dataDateRange Object with minDate and maxDate\n */\nfunction updateDashboard(data, dataDateRange) {\n  console.time('Dashboard Update');\n\n  // Store the filtered data and date range\n  dashboardData = data;\n  dateRange = dataDateRange;\n\n  // Update each visualization\n  dashboardCharts.updateTimeSeriesChart(timeSeriesChart, data, dateRange);\n  dashboardCharts.updateCategoryChart(categoryChart, data);\n  dashboardCharts.updateTopCountriesChart(topCountriesChart, data);\n  dashboardStats.updateSummaryStats(data, dateRange);\n  console.timeEnd('Dashboard Update');\n}\n\n/**\n * Handle window resize event to make charts responsive\n */\nfunction handleDashboardResize() {\n  if (dashboardData.length > 0) {\n    updateDashboard(dashboardData, dateRange);\n  }\n}\nvar _default = exports.default = {\n  initializeDashboard: initializeDashboard,\n  updateDashboard: updateDashboard,\n  handleDashboardResize: handleDashboardResize\n};"},"sourceMaps":null,"error":null,"hash":"ce2b394ba2b2784e83b5a95314e22920","cacheData":{"env":{}}}