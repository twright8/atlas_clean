{"id":"modules/dashboard.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"./dashboardLayout","loc":{"line":5,"column":33,"index":161},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboard.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboardLayout.js"},{"name":"./dashboardCharts","loc":{"line":6,"column":33,"index":216},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboard.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboardCharts.js"},{"name":"./dashboardStats","loc":{"line":7,"column":32,"index":270},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboard.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\src\\modules\\dashboardStats.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.handleDashboardResize = handleDashboardResize;\nexports.initializeDashboard = initializeDashboard;\nexports.updateDashboard = updateDashboard;\nvar dashboardLayout = _interopRequireWildcard(require(\"./dashboardLayout\"));\nvar dashboardCharts = _interopRequireWildcard(require(\"./dashboardCharts\"));\nvar dashboardStats = _interopRequireWildcard(require(\"./dashboardStats\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } /**\r\n * Enhanced dashboard module that orchestrates dashboard functionality\r\n * with improved visualizations and insights\r\n */\n// Dashboard state\nvar dashboardData = [];\nvar previousData = [];\nvar timeSeriesChart;\nvar categoryChart;\nvar topCountriesChart;\nvar dateRange;\nvar chartOptions = {\n  timeSeries: {\n    yearly: false\n  },\n  category: {\n    showAll: false\n  },\n  country: {\n    mapView: false\n  }\n};\n\n/**\r\n * Initialize the dashboard visualizations\r\n * @param {HTMLElement} container The container element for the dashboard\r\n */\nfunction initializeDashboard(container) {\n  console.time('Dashboard Initialization');\n\n  // Create dashboard layout\n  dashboardLayout.createDashboardLayout(container);\n\n  // Initialize charts with empty data\n  timeSeriesChart = dashboardCharts.initializeTimeSeriesChart();\n  categoryChart = dashboardCharts.initializeCategoryChart();\n  topCountriesChart = dashboardCharts.initializeTopCountriesChart();\n\n  // Setup event listeners for dashboard interactions\n  setupEventListeners();\n  console.timeEnd('Dashboard Initialization');\n}\n\n/**\r\n * Setup event listeners for dashboard interactions\r\n */\nfunction setupEventListeners() {\n  // Listen for view toggle events from the dashboardLayout\n  document.addEventListener('timeViewToggle', function (e) {\n    chartOptions.timeSeries.yearly = e.detail.yearly;\n    if (dashboardData.length > 0) {\n      dashboardCharts.updateTimeSeriesChart(timeSeriesChart, dashboardData, dateRange, chartOptions.timeSeries);\n    }\n  });\n  document.addEventListener('categoryViewToggle', function (e) {\n    chartOptions.category.showAll = e.detail.showAll;\n    if (dashboardData.length > 0) {\n      dashboardCharts.updateCategoryChart(categoryChart, dashboardData, chartOptions.category);\n    }\n  });\n  document.addEventListener('countryViewToggle', function (e) {\n    chartOptions.country.mapView = e.detail.mapView;\n    if (dashboardData.length > 0) {\n      dashboardCharts.updateTopCountriesChart(topCountriesChart, dashboardData, chartOptions.country);\n    }\n  });\n  document.addEventListener('refreshRecentArticles', function () {\n    if (dashboardData.length > 0) {\n      updateRecentArticles(dashboardData);\n    }\n  });\n}\n\n/**\r\n * Update the dashboard with filtered data\r\n * @param {Array} data Filtered data array\r\n * @param {Object} dataDateRange Object with minDate and maxDate\r\n */\nfunction updateDashboard(data, dataDateRange) {\n  console.time('Dashboard Update');\n\n  // Store the previous data for trend analysis\n  previousData = _toConsumableArray(dashboardData);\n\n  // Store the filtered data and date range\n  dashboardData = data;\n  dateRange = dataDateRange;\n\n  // Update each visualization with the options\n  dashboardCharts.updateTimeSeriesChart(timeSeriesChart, data, dateRange, chartOptions.timeSeries);\n  dashboardCharts.updateCategoryChart(categoryChart, data, chartOptions.category);\n  dashboardCharts.updateTopCountriesChart(topCountriesChart, data, chartOptions.country);\n  dashboardStats.updateSummaryStats(data, dateRange);\n\n  // Update additional components\n  updateKeyMetrics(data);\n  updateTrendAnalysis(data, previousData);\n  updateRecentArticles(data);\n  console.timeEnd('Dashboard Update');\n}\n\n/**\r\n * Update the key metrics in the dashboard header\r\n * @param {Array} data Filtered data array\r\n */\nfunction updateKeyMetrics(data) {\n  var keyMetricsContainer = document.getElementById('key-metrics');\n  if (!keyMetricsContainer) return;\n\n  // Clear previous metrics\n  keyMetricsContainer.innerHTML = '';\n\n  // Calculate key metrics\n\n  // 1. Latest article date\n  var latestDate = getLatestArticleDate(data);\n\n  // 2. Most mentioned country\n  var topCountry = getTopCountry(data);\n\n  // 3. Most common integrity issue\n  var topCategory = getTopCategory(data);\n\n  // Create metrics HTML\n  var metricsHTML = \"\\n        <div class=\\\"key-metric\\\">\\n            <span class=\\\"key-metric-value\\\">\".concat(latestDate, \"</span>\\n            <span class=\\\"key-metric-label\\\">Latest Article</span>\\n        </div>\\n        <div class=\\\"key-metric\\\">\\n            <span class=\\\"key-metric-value\\\">\").concat(topCountry.name, \"</span>\\n            <span class=\\\"key-metric-label\\\">Most Mentioned Country</span>\\n        </div>\\n        <div class=\\\"key-metric\\\">\\n            <span class=\\\"key-metric-value\\\">\").concat(topCategory.name, \"</span>\\n            <span class=\\\"key-metric-label\\\">Top Integrity Issue</span>\\n        </div>\\n    \");\n  keyMetricsContainer.innerHTML = metricsHTML;\n}\n\n/**\r\n * Get the date of the most recent article\r\n * @param {Array} data Filtered data array\r\n * @returns {String} Formatted date string\r\n */\nfunction getLatestArticleDate(data) {\n  if (data.length === 0) return 'N/A';\n  var sortedByDate = _toConsumableArray(data).sort(function (a, b) {\n    if (!a.parsedDate || !b.parsedDate) return 0;\n    return b.parsedDate - a.parsedDate;\n  });\n  if (!sortedByDate[0].parsedDate) return 'N/A';\n\n  // Format date to DD Month YYYY\n  var date = sortedByDate[0].parsedDate;\n  var options = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  };\n  return date.toLocaleDateString(undefined, options);\n}\n\n/**\r\n * Get the most mentioned country and its count\r\n * @param {Array} data Filtered data array\r\n * @returns {Object} Object with country name and count\r\n */\nfunction getTopCountry(data) {\n  if (data.length === 0) return {\n    name: 'N/A',\n    count: 0\n  };\n  var countryCounts = {};\n  data.forEach(function (item) {\n    if (item.country && item.country.trim()) {\n      countryCounts[item.country] = (countryCounts[item.country] || 0) + 1;\n    }\n  });\n  if (Object.keys(countryCounts).length === 0) return {\n    name: 'N/A',\n    count: 0\n  };\n  var sortedCountries = Object.entries(countryCounts).sort(function (a, b) {\n    return b[1] - a[1];\n  });\n  return {\n    name: sortedCountries[0][0],\n    count: sortedCountries[0][1]\n  };\n}\n\n/**\r\n * Get the most common integrity issue category\r\n * @param {Array} data Filtered data array\r\n * @returns {Object} Object with category name and count\r\n */\nfunction getTopCategory(data) {\n  if (data.length === 0) return {\n    name: 'N/A',\n    count: 0\n  };\n  var categoryCounts = {};\n  data.forEach(function (item) {\n    if (Array.isArray(item['Corruption Categories'])) {\n      item['Corruption Categories'].forEach(function (category) {\n        if (category && category.trim()) {\n          categoryCounts[category] = (categoryCounts[category] || 0) + 1;\n        }\n      });\n    }\n  });\n  if (Object.keys(categoryCounts).length === 0) return {\n    name: 'N/A',\n    count: 0\n  };\n  var sortedCategories = Object.entries(categoryCounts).sort(function (a, b) {\n    return b[1] - a[1];\n  });\n  return {\n    name: sortedCategories[0][0],\n    count: sortedCategories[0][1]\n  };\n}\n\n/**\r\n * Update the trend analysis section\r\n * @param {Array} currentData Current filtered data array\r\n * @param {Array} previousData Previous filtered data array\r\n */\nfunction updateTrendAnalysis(currentData, previousData) {\n  var trendIndicatorsContainer = document.getElementById('trend-indicators');\n  if (!trendIndicatorsContainer) return;\n\n  // Clear previous trends\n  trendIndicatorsContainer.innerHTML = '';\n\n  // Skip if no previous data to compare with\n  if (previousData.length === 0) {\n    trendIndicatorsContainer.innerHTML = \"\\n            <div class=\\\"trend-indicator\\\">\\n                <div class=\\\"trend-title\\\">Trend Analysis</div>\\n                <div class=\\\"trend-value trend-neutral\\\">\\n                    <i class=\\\"fa fa-info-circle\\\"></i>\\n                    <span>Not enough data for trends</span>\\n                </div>\\n            </div>\\n        \";\n    return;\n  }\n\n  // Calculate trends\n\n  // 1. Change in total articles\n  var totalArticlesTrend = calculatePercentageChange(currentData.length, previousData.length);\n\n  // 2. Change in countries covered\n  var currentCountries = new Set(currentData.map(function (item) {\n    return item.country;\n  }).filter(Boolean)).size;\n  var previousCountries = new Set(previousData.map(function (item) {\n    return item.country;\n  }).filter(Boolean)).size;\n  var countriesTrend = calculatePercentageChange(currentCountries, previousCountries);\n\n  // 3. Change in top category\n  var currentTopCategory = getTopCategory(currentData);\n  var previousTopCategory = getTopCategory(previousData);\n  var categoryTrendValue = 'New';\n  var categoryTrendClass = 'trend-neutral';\n  if (currentTopCategory.name === previousTopCategory.name) {\n    var categoryTrend = calculatePercentageChange(currentTopCategory.count, previousTopCategory.count);\n    categoryTrendValue = \"\".concat(categoryTrend.value, \"%\");\n    categoryTrendClass = categoryTrend.direction;\n  }\n\n  // Create trends HTML\n  var trendsHTML = \"\\n        <div class=\\\"trend-indicator\\\">\\n            <div class=\\\"trend-title\\\">\\n                <i class=\\\"fa fa-newspaper-o\\\"></i>\\n                <span>Articles</span>\\n            </div>\\n            <div class=\\\"trend-value \".concat(totalArticlesTrend.direction, \"\\\">\\n                <i class=\\\"fa fa-\").concat(getTrendIcon(totalArticlesTrend.direction), \"\\\"></i>\\n                <span>\").concat(totalArticlesTrend.value, \"%</span>\\n            </div>\\n        </div>\\n        <div class=\\\"trend-indicator\\\">\\n            <div class=\\\"trend-title\\\">\\n                <i class=\\\"fa fa-globe\\\"></i>\\n                <span>Countries</span>\\n            </div>\\n            <div class=\\\"trend-value \").concat(countriesTrend.direction, \"\\\">\\n                <i class=\\\"fa fa-\").concat(getTrendIcon(countriesTrend.direction), \"\\\"></i>\\n                <span>\").concat(countriesTrend.value, \"%</span>\\n            </div>\\n        </div>\\n        <div class=\\\"trend-indicator\\\">\\n            <div class=\\\"trend-title\\\">\\n                <i class=\\\"fa fa-tag\\\"></i>\\n                <span>Top Category</span>\\n            </div>\\n            <div class=\\\"trend-value \").concat(categoryTrendClass, \"\\\">\\n                <i class=\\\"fa fa-\").concat(getTrendIcon(categoryTrendClass), \"\\\"></i>\\n                <span>\").concat(categoryTrendValue, \"</span>\\n            </div>\\n        </div>\\n    \");\n  trendIndicatorsContainer.innerHTML = trendsHTML;\n}\n\n/**\r\n * Calculate percentage change between two values\r\n * @param {Number} current Current value\r\n * @param {Number} previous Previous value\r\n * @returns {Object} Object with percentage value and direction\r\n */\nfunction calculatePercentageChange(current, previous) {\n  if (previous === 0) return {\n    value: 0,\n    direction: 'trend-neutral'\n  };\n  var change = current - previous;\n  var percentageChange = Math.round(change / previous * 100);\n  var direction;\n  if (percentageChange > 0) {\n    direction = 'trend-up';\n  } else if (percentageChange < 0) {\n    direction = 'trend-down';\n  } else {\n    direction = 'trend-neutral';\n  }\n  return {\n    value: Math.abs(percentageChange),\n    direction: direction\n  };\n}\n\n/**\r\n * Get icon name based on trend direction\r\n * @param {String} direction Trend direction class\r\n * @returns {String} Icon name\r\n */\nfunction getTrendIcon(direction) {\n  switch (direction) {\n    case 'trend-up':\n      return 'arrow-up';\n    case 'trend-down':\n      return 'arrow-down';\n    default:\n      return 'minus';\n  }\n}\n\n/**\r\n * Update the recent articles section\r\n * @param {Array} data Filtered data array\r\n */\nfunction updateRecentArticles(data) {\n  var recentArticlesList = document.getElementById('recent-articles-list');\n  if (!recentArticlesList) return;\n\n  // Clear previous articles\n  recentArticlesList.innerHTML = '';\n  if (data.length === 0) {\n    recentArticlesList.innerHTML = '<p class=\"no-data-message\">No articles available</p>';\n    return;\n  }\n\n  // Sort data by date (newest first)\n  var sortedData = _toConsumableArray(data).sort(function (a, b) {\n    if (!a.parsedDate || !b.parsedDate) return 0;\n    return b.parsedDate - a.parsedDate;\n  });\n\n  // Take only the 5 most recent articles\n  var recentArticles = sortedData.slice(0, 5);\n\n  // Create HTML for recent articles\n  var articlesHTML = recentArticles.map(function (article) {\n    var title = article.Title || 'Untitled';\n    var country = article.country || 'Unknown';\n\n    // Format date properly or use a fallback\n    var date = 'Unknown date';\n    if (article.parsedDate) {\n      var options = {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      };\n      date = article.parsedDate.toLocaleDateString(undefined, options);\n    } else if (article.Date) {\n      date = article.Date;\n    }\n    return \"\\n            <div class=\\\"article-item\\\" data-url=\\\"\".concat(article.url || '#', \"\\\" onclick=\\\"window.open('\").concat(article.url || '#', \"', '_blank')\\\">\\n                <div class=\\\"article-title\\\">\").concat(title, \"</div>\\n                <div class=\\\"article-meta\\\">\\n                    <span><i class=\\\"fa fa-map-marker\\\"></i> \").concat(country, \"</span>\\n                    <span><i class=\\\"fa fa-calendar\\\"></i> \").concat(date, \"</span>\\n                </div>\\n            </div>\\n        \");\n  }).join('');\n  recentArticlesList.innerHTML = articlesHTML;\n}\n\n/**\r\n * Handle window resize event to make charts responsive\r\n */\nfunction handleDashboardResize() {\n  if (dashboardData.length > 0) {\n    // Only update the charts, not the entire dashboard\n    dashboardCharts.updateTimeSeriesChart(timeSeriesChart, dashboardData, dateRange, chartOptions.timeSeries);\n    dashboardCharts.updateCategoryChart(categoryChart, dashboardData, chartOptions.category);\n    dashboardCharts.updateTopCountriesChart(topCountriesChart, dashboardData, chartOptions.country);\n  }\n}\nvar _default = exports.default = {\n  initializeDashboard: initializeDashboard,\n  updateDashboard: updateDashboard,\n  handleDashboardResize: handleDashboardResize\n};"},"sourceMaps":null,"error":null,"hash":"7956570dfeb174e515ed631241cc1175","cacheData":{"env":{}}}