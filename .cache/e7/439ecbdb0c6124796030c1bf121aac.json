{"id":"../node_modules/d3-geo/src/stream.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-geo\\package.json","includedInParent":true,"mtime":1737120275660}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nfunction streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\nvar streamObjectType = {\n  Feature: function (object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function (object, stream) {\n    var features = object.features,\n      i = -1,\n      n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\nvar streamGeometryType = {\n  Sphere: function (object, stream) {\n    stream.sphere();\n  },\n  Point: function (object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function (object, stream) {\n    var coordinates = object.coordinates,\n      i = -1,\n      n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function (object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function (object, stream) {\n    var coordinates = object.coordinates,\n      i = -1,\n      n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function (object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function (object, stream) {\n    var coordinates = object.coordinates,\n      i = -1,\n      n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function (object, stream) {\n    var geometries = object.geometries,\n      i = -1,\n      n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1,\n    n = coordinates.length - closed,\n    coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\nfunction streamPolygon(coordinates, stream) {\n  var i = -1,\n    n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\nfunction _default(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}"},"sourceMaps":null,"error":null,"hash":"55843e8c8e5096486f09a80b7fb40e26","cacheData":{"env":{}}}