{"id":"../node_modules/d3-scale/src/quantize.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1741868822789},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\package.json","includedInParent":true,"mtime":1737120275874},{"name":"d3-array","loc":{"line":1,"column":21,"index":21},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\quantize.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-array\\src\\index.js"},{"name":"./array","loc":{"line":2,"column":20,"index":54},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\quantize.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\array.js"},{"name":"./linear","loc":{"line":3,"column":24,"index":90},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\quantize.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\linear.js"},{"name":"./init","loc":{"line":4,"column":24,"index":127},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\quantize.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-scale\\src\\init.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = quantize;\nvar _d3Array = require(\"d3-array\");\nvar _array = require(\"./array\");\nvar _linear = require(\"./linear\");\nvar _init = require(\"./init\");\nfunction quantize() {\n  var x0 = 0,\n    x1 = 1,\n    n = 1,\n    domain = [0.5],\n    range = [0, 1],\n    unknown;\n  function scale(x) {\n    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;\n  }\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    return scale;\n  }\n  scale.domain = function (_) {\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n  };\n  scale.range = function (_) {\n    return arguments.length ? (n = (range = _array.slice.call(_)).length - 1, rescale()) : range.slice();\n  };\n  scale.invertExtent = function (y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];\n  };\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : scale;\n  };\n  scale.thresholds = function () {\n    return domain.slice();\n  };\n  scale.copy = function () {\n    return quantize().domain([x0, x1]).range(range).unknown(unknown);\n  };\n  return _init.initRange.apply((0, _linear.linearish)(scale), arguments);\n}"},"sourceMaps":null,"error":null,"hash":"65de84b752a6e813cebf2e90da20535b","cacheData":{"env":{}}}