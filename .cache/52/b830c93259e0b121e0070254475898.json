{"id":"../node_modules/d3-voronoi/src/Beach.js","dependencies":[{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\package.json","includedInParent":true,"mtime":1742042086953},{"name":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\package.json","includedInParent":true,"mtime":1737120276105},{"name":"./RedBlackTree","loc":{"line":1,"column":27,"index":27},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Beach.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\RedBlackTree.js"},{"name":"./Cell","loc":{"line":2,"column":25,"index":71},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Beach.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Cell.js"},{"name":"./Circle","loc":{"line":3,"column":41,"index":123},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Beach.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Circle.js"},{"name":"./Edge","loc":{"line":4,"column":37,"index":173},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Beach.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Edge.js"},{"name":"./Diagram","loc":{"line":5,"column":31,"index":215},"parent":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Beach.js","resolved":"C:\\Users\\Tom\\PycharmProjects\\health_atlas\\atlas_clean\\node_modules\\d3-voronoi\\src\\Diagram.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addBeach = addBeach;\nexports.removeBeach = removeBeach;\nvar _RedBlackTree = require(\"./RedBlackTree\");\nvar _Cell = require(\"./Cell\");\nvar _Circle = require(\"./Circle\");\nvar _Edge = require(\"./Edge\");\nvar _Diagram = require(\"./Diagram\");\nvar beachPool = [];\nfunction Beach() {\n  (0, _RedBlackTree.RedBlackNode)(this);\n  this.edge = this.site = this.circle = null;\n}\nfunction createBeach(site) {\n  var beach = beachPool.pop() || new Beach();\n  beach.site = site;\n  return beach;\n}\nfunction detachBeach(beach) {\n  (0, _Circle.detachCircle)(beach);\n  _Diagram.beaches.remove(beach);\n  beachPool.push(beach);\n  (0, _RedBlackTree.RedBlackNode)(beach);\n}\nfunction removeBeach(beach) {\n  var circle = beach.circle,\n    x = circle.x,\n    y = circle.cy,\n    vertex = [x, y],\n    previous = beach.P,\n    next = beach.N,\n    disappearing = [beach];\n  detachBeach(beach);\n  var lArc = previous;\n  while (lArc.circle && Math.abs(x - lArc.circle.x) < _Diagram.epsilon && Math.abs(y - lArc.circle.cy) < _Diagram.epsilon) {\n    previous = lArc.P;\n    disappearing.unshift(lArc);\n    detachBeach(lArc);\n    lArc = previous;\n  }\n  disappearing.unshift(lArc);\n  (0, _Circle.detachCircle)(lArc);\n  var rArc = next;\n  while (rArc.circle && Math.abs(x - rArc.circle.x) < _Diagram.epsilon && Math.abs(y - rArc.circle.cy) < _Diagram.epsilon) {\n    next = rArc.N;\n    disappearing.push(rArc);\n    detachBeach(rArc);\n    rArc = next;\n  }\n  disappearing.push(rArc);\n  (0, _Circle.detachCircle)(rArc);\n  var nArcs = disappearing.length,\n    iArc;\n  for (iArc = 1; iArc < nArcs; ++iArc) {\n    rArc = disappearing[iArc];\n    lArc = disappearing[iArc - 1];\n    (0, _Edge.setEdgeEnd)(rArc.edge, lArc.site, rArc.site, vertex);\n  }\n  lArc = disappearing[0];\n  rArc = disappearing[nArcs - 1];\n  rArc.edge = (0, _Edge.createEdge)(lArc.site, rArc.site, null, vertex);\n  (0, _Circle.attachCircle)(lArc);\n  (0, _Circle.attachCircle)(rArc);\n}\nfunction addBeach(site) {\n  var x = site[0],\n    directrix = site[1],\n    lArc,\n    rArc,\n    dxl,\n    dxr,\n    node = _Diagram.beaches._;\n  while (node) {\n    dxl = leftBreakPoint(node, directrix) - x;\n    if (dxl > _Diagram.epsilon) node = node.L;else {\n      dxr = x - rightBreakPoint(node, directrix);\n      if (dxr > _Diagram.epsilon) {\n        if (!node.R) {\n          lArc = node;\n          break;\n        }\n        node = node.R;\n      } else {\n        if (dxl > -_Diagram.epsilon) {\n          lArc = node.P;\n          rArc = node;\n        } else if (dxr > -_Diagram.epsilon) {\n          lArc = node;\n          rArc = node.N;\n        } else {\n          lArc = rArc = node;\n        }\n        break;\n      }\n    }\n  }\n  (0, _Cell.createCell)(site);\n  var newArc = createBeach(site);\n  _Diagram.beaches.insert(lArc, newArc);\n  if (!lArc && !rArc) return;\n  if (lArc === rArc) {\n    (0, _Circle.detachCircle)(lArc);\n    rArc = createBeach(lArc.site);\n    _Diagram.beaches.insert(newArc, rArc);\n    newArc.edge = rArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);\n    (0, _Circle.attachCircle)(lArc);\n    (0, _Circle.attachCircle)(rArc);\n    return;\n  }\n  if (!rArc) {\n    // && lArc\n    newArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);\n    return;\n  }\n\n  // else lArc !== rArc\n  (0, _Circle.detachCircle)(lArc);\n  (0, _Circle.detachCircle)(rArc);\n  var lSite = lArc.site,\n    ax = lSite[0],\n    ay = lSite[1],\n    bx = site[0] - ax,\n    by = site[1] - ay,\n    rSite = rArc.site,\n    cx = rSite[0] - ax,\n    cy = rSite[1] - ay,\n    d = 2 * (bx * cy - by * cx),\n    hb = bx * bx + by * by,\n    hc = cx * cx + cy * cy,\n    vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n  (0, _Edge.setEdgeEnd)(rArc.edge, lSite, rSite, vertex);\n  newArc.edge = (0, _Edge.createEdge)(lSite, site, null, vertex);\n  rArc.edge = (0, _Edge.createEdge)(site, rSite, null, vertex);\n  (0, _Circle.attachCircle)(lArc);\n  (0, _Circle.attachCircle)(rArc);\n}\nfunction leftBreakPoint(arc, directrix) {\n  var site = arc.site,\n    rfocx = site[0],\n    rfocy = site[1],\n    pby2 = rfocy - directrix;\n  if (!pby2) return rfocx;\n  var lArc = arc.P;\n  if (!lArc) return -Infinity;\n  site = lArc.site;\n  var lfocx = site[0],\n    lfocy = site[1],\n    plby2 = lfocy - directrix;\n  if (!plby2) return lfocx;\n  var hl = lfocx - rfocx,\n    aby2 = 1 / pby2 - 1 / plby2,\n    b = hl / plby2;\n  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n  return (rfocx + lfocx) / 2;\n}\nfunction rightBreakPoint(arc, directrix) {\n  var rArc = arc.N;\n  if (rArc) return leftBreakPoint(rArc, directrix);\n  var site = arc.site;\n  return site[1] === directrix ? site[0] : Infinity;\n}"},"sourceMaps":null,"error":null,"hash":"2b67ef03d4f1169fdafd3f78d1a6bada","cacheData":{"env":{}}}